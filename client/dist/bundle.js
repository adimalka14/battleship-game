/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={6617:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(9040)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},9040:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,o,s=null;function a(...e){if(!a.enabled)return;const r=a,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const o=t.formatters[i];if("function"==typeof o){const t=e[s];n=o.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(3097),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},3097:e=>{var t=1e3,n=60*t,r=60*n,i=24*r,o=7*i;function s(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,a){a=a||{};var c,u,l=typeof e;if("string"===l&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var s=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(s){var a=parseFloat(s[1]);switch((s[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return a*o;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===l&&isFinite(e))return a.long?(c=e,(u=Math.abs(c))>=i?s(c,u,i,"day"):u>=r?s(c,u,r,"hour"):u>=n?s(c,u,n,"minute"):u>=t?s(c,u,t,"second"):c+" ms"):function(e){var o=Math.abs(e);return o>=i?Math.round(e/i)+"d":o>=r?Math.round(e/r)+"h":o>=n?Math.round(e/n)+"m":o>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},2617:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";function t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function n(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?t(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,h(r.key),r)}}function s(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function a(e,t,n){return(t=h(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&l(e,t)}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function l(e,t){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},l(e,t)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var i=u(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return function(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return p(e)}(this,n)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=u(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(arguments.length<3?e:n):i.value}},f.apply(this,arguments)}function h(e){var t=function(e){if("object"!=typeof e||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:t+""}var v=function(e){return!(!e||!e.Window)&&e instanceof e.Window},g=void 0,m=void 0;function y(e){g=e;var t=e.document.createTextNode("");t.ownerDocument!==e.document&&"function"==typeof e.wrap&&e.wrap(t)===t&&(e=e.wrap(e)),m=e}function b(e){return v(e)?e:(e.ownerDocument||e).defaultView||m.window}"undefined"!=typeof window&&window&&y(window);var x=function(e){return!!e&&"object"===r(e)},w=function(e){return"function"==typeof e},C=function(e){return e===m||v(e)},E=function(e){return x(e)&&11===e.nodeType},_=x,T=w,S=function(e){return"number"==typeof e},k=function(e){return"boolean"==typeof e},O=function(e){return"string"==typeof e},P=function(e){if(!e||"object"!==r(e))return!1;var t=b(e)||m;return/object|function/.test("undefined"==typeof Element?"undefined":r(Element))?e instanceof Element||e instanceof t.Element:1===e.nodeType&&"string"==typeof e.nodeName},A=function(e){return x(e)&&!!e.constructor&&/function Object\b/.test(e.constructor.toString())},D=function(e){return x(e)&&void 0!==e.length&&w(e.splice)};function F(e){var t=e.interaction;if("drag"===t.prepared.name){var n=t.prepared.axis;"x"===n?(t.coords.cur.page.y=t.coords.start.page.y,t.coords.cur.client.y=t.coords.start.client.y,t.coords.velocity.client.y=0,t.coords.velocity.page.y=0):"y"===n&&(t.coords.cur.page.x=t.coords.start.page.x,t.coords.cur.client.x=t.coords.start.client.x,t.coords.velocity.client.x=0,t.coords.velocity.page.x=0)}}function R(e){var t=e.iEvent,n=e.interaction;if("drag"===n.prepared.name){var r=n.prepared.axis;if("x"===r||"y"===r){var i="x"===r?"y":"x";t.page[i]=n.coords.start.page[i],t.client[i]=n.coords.start.client[i],t.delta[i]=0}}}var M={id:"actions/drag",install:function(e){var t=e.actions,n=e.Interactable,r=e.defaults;n.prototype.draggable=M.draggable,t.map.drag=M,t.methodDict.drag="draggable",r.actions.drag=M.defaults},listeners:{"interactions:before-action-move":F,"interactions:action-resume":F,"interactions:action-move":R,"auto-start:check":function(e){var t=e.interaction,n=e.interactable,r=e.buttons,i=n.options.drag;if(i&&i.enabled&&(!t.pointerIsDown||!/mouse|pointer/.test(t.pointerType)||r&n.options.drag.mouseButtons))return e.action={name:"drag",axis:"start"===i.lockAxis?i.startAxis:i.lockAxis},!1}},draggable:function(e){return _(e)?(this.options.drag.enabled=!1!==e.enabled,this.setPerAction("drag",e),this.setOnEvents("drag",e),/^(xy|x|y|start)$/.test(e.lockAxis)&&(this.options.drag.lockAxis=e.lockAxis),/^(xy|x|y)$/.test(e.startAxis)&&(this.options.drag.startAxis=e.startAxis),this):k(e)?(this.options.drag.enabled=e,this):this.options.drag},beforeMove:F,move:R,defaults:{startAxis:"xy",lockAxis:"xy"},getCursor:function(){return"move"},filterEventType:function(e){return 0===e.search("drag")}},j=M,I={init:function(e){var t=e;I.document=t.document,I.DocumentFragment=t.DocumentFragment||N,I.SVGElement=t.SVGElement||N,I.SVGSVGElement=t.SVGSVGElement||N,I.SVGElementInstance=t.SVGElementInstance||N,I.Element=t.Element||N,I.HTMLElement=t.HTMLElement||I.Element,I.Event=t.Event,I.Touch=t.Touch||N,I.PointerEvent=t.PointerEvent||t.MSPointerEvent},document:null,DocumentFragment:null,SVGElement:null,SVGSVGElement:null,SVGElementInstance:null,Element:null,HTMLElement:null,Event:null,Touch:null,PointerEvent:null};function N(){}var L=I,B={init:function(e){var t=L.Element,n=e.navigator||{};B.supportsTouch="ontouchstart"in e||T(e.DocumentTouch)&&L.document instanceof e.DocumentTouch,B.supportsPointerEvent=!1!==n.pointerEnabled&&!!L.PointerEvent,B.isIOS=/iP(hone|od|ad)/.test(n.platform),B.isIOS7=/iP(hone|od|ad)/.test(n.platform)&&/OS 7[^\d]/.test(n.appVersion),B.isIe9=/MSIE 9/.test(n.userAgent),B.isOperaMobile="Opera"===n.appName&&B.supportsTouch&&/Presto/.test(n.userAgent),B.prefixedMatchesSelector="matches"in t.prototype?"matches":"webkitMatchesSelector"in t.prototype?"webkitMatchesSelector":"mozMatchesSelector"in t.prototype?"mozMatchesSelector":"oMatchesSelector"in t.prototype?"oMatchesSelector":"msMatchesSelector",B.pEventTypes=B.supportsPointerEvent?L.PointerEvent===e.MSPointerEvent?{up:"MSPointerUp",down:"MSPointerDown",over:"mouseover",out:"mouseout",move:"MSPointerMove",cancel:"MSPointerCancel"}:{up:"pointerup",down:"pointerdown",over:"pointerover",out:"pointerout",move:"pointermove",cancel:"pointercancel"}:null,B.wheelEvent=L.document&&"onmousewheel"in L.document?"mousewheel":"wheel"},supportsTouch:null,supportsPointerEvent:null,isIOS7:null,isIOS:null,isIe9:null,isOperaMobile:null,prefixedMatchesSelector:null,pEventTypes:null,wheelEvent:null},H=B;function q(e,t){if(e.contains)return e.contains(t);for(;t;){if(t===e)return!0;t=t.parentNode}return!1}function z(e,t){for(;P(e);){if(U(e,t))return e;e=W(e)}return null}function W(e){var t=e.parentNode;if(E(t)){for(;(t=t.host)&&E(t););return t}return t}function U(e,t){return m!==g&&(t=t.replace(/\/deep\//g," ")),e[H.prefixedMatchesSelector](t)}var V=function(e){return e.parentNode||e.host};function Y(e,t){for(var n,r=[],i=e;(n=V(i))&&i!==t&&n!==i.ownerDocument;)r.unshift(i),i=n;return r}function $(e,t,n){for(;P(e);){if(U(e,t))return!0;if((e=W(e))===n)return U(e,t)}return!1}function X(e){return e.correspondingUseElement||e}function G(e){var t=e instanceof L.SVGElement?e.getBoundingClientRect():e.getClientRects()[0];return t&&{left:t.left,right:t.right,top:t.top,bottom:t.bottom,width:t.width||t.right-t.left,height:t.height||t.bottom-t.top}}function K(e){var t,n=G(e);if(!H.isIOS7&&n){var r={x:(t=(t=b(e))||m).scrollX||t.document.documentElement.scrollLeft,y:t.scrollY||t.document.documentElement.scrollTop};n.left+=r.x,n.right+=r.x,n.top+=r.y,n.bottom+=r.y}return n}function J(e){for(var t=[];e;)t.push(e),e=W(e);return t}function Z(e){return!!O(e)&&(L.document.querySelector(e),!0)}function Q(e,t){for(var n in t)e[n]=t[n];return e}function ee(e,t,n){return"parent"===e?W(n):"self"===e?t.getRect(n):z(n,e)}function te(e,t,n,r){var i=e;return O(i)?i=ee(i,t,n):T(i)&&(i=i.apply(void 0,r)),P(i)&&(i=K(i)),i}function ne(e){return e&&{x:"x"in e?e.x:e.left,y:"y"in e?e.y:e.top}}function re(e){return!e||"x"in e&&"y"in e||((e=Q({},e)).x=e.left||0,e.y=e.top||0,e.width=e.width||(e.right||0)-e.x,e.height=e.height||(e.bottom||0)-e.y),e}function ie(e,t,n){e.left&&(t.left+=n.x),e.right&&(t.right+=n.x),e.top&&(t.top+=n.y),e.bottom&&(t.bottom+=n.y),t.width=t.right-t.left,t.height=t.bottom-t.top}function oe(e,t,n){var r=n&&e.options[n];return ne(te(r&&r.origin||e.options.origin,e,t,[e&&t]))||{x:0,y:0}}function se(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(e){return!0},r=arguments.length>3?arguments[3]:void 0;if(r=r||{},O(e)&&-1!==e.search(" ")&&(e=ae(e)),D(e))return e.forEach((function(e){return se(e,t,n,r)})),r;if(_(e)&&(t=e,e=""),T(t)&&n(e))r[e]=r[e]||[],r[e].push(t);else if(D(t))for(var i=0,o=t;i<o.length;i++){var s=o[i];se(e,s,n,r)}else if(_(t))for(var a in t)se(ae(a).map((function(t){return"".concat(e).concat(t)})),t[a],n,r);return r}function ae(e){return e.trim().split(/ +/)}var ce=function(e,t){return Math.sqrt(e*e+t*t)},ue=["webkit","moz"];function le(e,t){e.__set||(e.__set={});var n=function(n){if(ue.some((function(e){return 0===n.indexOf(e)})))return 1;"function"!=typeof e[n]&&"__set"!==n&&Object.defineProperty(e,n,{get:function(){return n in e.__set?e.__set[n]:e.__set[n]=t[n]},set:function(t){e.__set[n]=t},configurable:!0})};for(var r in t)n(r);return e}function pe(e,t){e.page=e.page||{},e.page.x=t.page.x,e.page.y=t.page.y,e.client=e.client||{},e.client.x=t.client.x,e.client.y=t.client.y,e.timeStamp=t.timeStamp}function de(e){e.page.x=0,e.page.y=0,e.client.x=0,e.client.y=0}function fe(e){return e instanceof L.Event||e instanceof L.Touch}function he(e,t,n){return e=e||"page",(n=n||{}).x=t[e+"X"],n.y=t[e+"Y"],n}function ve(e,t){return t=t||{x:0,y:0},H.isOperaMobile&&fe(e)?(he("screen",e,t),t.x+=window.scrollX,t.y+=window.scrollY):he("page",e,t),t}function ge(e){return S(e.pointerId)?e.pointerId:e.identifier}function me(e){var t=[];return D(e)?(t[0]=e[0],t[1]=e[1]):"touchend"===e.type?1===e.touches.length?(t[0]=e.touches[0],t[1]=e.changedTouches[0]):0===e.touches.length&&(t[0]=e.changedTouches[0],t[1]=e.changedTouches[1]):(t[0]=e.touches[0],t[1]=e.touches[1]),t}function ye(e){for(var t={pageX:0,pageY:0,clientX:0,clientY:0,screenX:0,screenY:0},n=0;n<e.length;n++){var r=e[n];for(var i in t)t[i]+=r[i]}for(var o in t)t[o]/=e.length;return t}function be(e){if(!e.length)return null;var t=me(e),n=Math.min(t[0].pageX,t[1].pageX),r=Math.min(t[0].pageY,t[1].pageY),i=Math.max(t[0].pageX,t[1].pageX),o=Math.max(t[0].pageY,t[1].pageY);return{x:n,y:r,left:n,top:r,right:i,bottom:o,width:i-n,height:o-r}}function xe(e,t){var n=t+"X",r=t+"Y",i=me(e),o=i[0][n]-i[1][n],s=i[0][r]-i[1][r];return ce(o,s)}function we(e,t){var n=t+"X",r=t+"Y",i=me(e),o=i[1][n]-i[0][n],s=i[1][r]-i[0][r];return 180*Math.atan2(s,o)/Math.PI}function Ce(e){return O(e.pointerType)?e.pointerType:S(e.pointerType)?[void 0,void 0,"touch","pen","mouse"][e.pointerType]:/touch/.test(e.type||"")||e instanceof L.Touch?"touch":"mouse"}function Ee(e){var t=T(e.composedPath)?e.composedPath():e.path;return[X(t?t[0]:e.target),X(e.currentTarget)]}var _e=function(){function e(t){i(this,e),this.immediatePropagationStopped=!1,this.propagationStopped=!1,this._interaction=t}return s(e,[{key:"preventDefault",value:function(){}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}}]),e}();Object.defineProperty(_e.prototype,"interaction",{get:function(){return this._interaction._proxy},set:function(){}});var Te=function(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.push(r)}return e},Se=function(e){return Te([],e)},ke=function(e,t){for(var n=0;n<e.length;n++)if(t(e[n],n,e))return n;return-1},Oe=function(e,t){return e[ke(e,t)]},Pe=function(e){c(n,e);var t=d(n);function n(e,r,o){var s;i(this,n),(s=t.call(this,r._interaction)).dropzone=void 0,s.dragEvent=void 0,s.relatedTarget=void 0,s.draggable=void 0,s.propagationStopped=!1,s.immediatePropagationStopped=!1;var a="dragleave"===o?e.prev:e.cur,c=a.element,u=a.dropzone;return s.type=o,s.target=c,s.currentTarget=c,s.dropzone=u,s.dragEvent=r,s.relatedTarget=r.target,s.draggable=r.interactable,s.timeStamp=r.timeStamp,s}return s(n,[{key:"reject",value:function(){var e=this,t=this._interaction.dropState;if("dropactivate"===this.type||this.dropzone&&t.cur.dropzone===this.dropzone&&t.cur.element===this.target)if(t.prev.dropzone=this.dropzone,t.prev.element=this.target,t.rejected=!0,t.events.enter=null,this.stopImmediatePropagation(),"dropactivate"===this.type){var r=t.activeDrops,i=ke(r,(function(t){var n=t.dropzone,r=t.element;return n===e.dropzone&&r===e.target}));t.activeDrops.splice(i,1);var o=new n(t,this.dragEvent,"dropdeactivate");o.dropzone=this.dropzone,o.target=this.target,this.dropzone.fire(o)}else this.dropzone.fire(new n(t,this.dragEvent,"dragleave"))}},{key:"preventDefault",value:function(){}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}}]),n}(_e);function Ae(e,t){for(var n=0,r=e.slice();n<r.length;n++){var i=r[n],o=i.dropzone,s=i.element;t.dropzone=o,t.target=s,o.fire(t),t.propagationStopped=t.immediatePropagationStopped=!1}}function De(e,t){for(var n=function(e,t){for(var n=[],r=0,i=e.interactables.list;r<i.length;r++){var o=i[r];if(o.options.drop.enabled){var s=o.options.drop.accept;if(!(P(s)&&s!==t||O(s)&&!U(t,s)||T(s)&&!s({dropzone:o,draggableElement:t})))for(var a=0,c=o.getAllElements();a<c.length;a++){var u=c[a];u!==t&&n.push({dropzone:o,element:u,rect:o.getRect(u)})}}}return n}(e,t),r=0;r<n.length;r++){var i=n[r];i.rect=i.dropzone.getRect(i.element)}return n}function Fe(e,t,n){for(var r=e.dropState,i=e.interactable,o=e.element,s=[],a=0,c=r.activeDrops;a<c.length;a++){var u=c[a],l=u.dropzone,p=u.element,d=u.rect,f=l.dropCheck(t,n,i,o,p,d);s.push(f?p:null)}var h=function(e){for(var t,n,r,i=[],o=0;o<e.length;o++){var s=e[o],a=e[t];if(s&&o!==t)if(a){var c=V(s),u=V(a);if(c!==s.ownerDocument)if(u!==s.ownerDocument)if(c!==u){i=i.length?i:Y(a);var l=void 0;if(a instanceof L.HTMLElement&&s instanceof L.SVGElement&&!(s instanceof L.SVGSVGElement)){if(s===u)continue;l=s.ownerSVGElement}else l=s;for(var p=Y(l,a.ownerDocument),d=0;p[d]&&p[d]===i[d];)d++;var f=[p[d-1],p[d],i[d]];if(f[0])for(var h=f[0].lastChild;h;){if(h===f[1]){t=o,i=p;break}if(h===f[2])break;h=h.previousSibling}}else r=a,(parseInt(b(n=s).getComputedStyle(n).zIndex,10)||0)>=(parseInt(b(r).getComputedStyle(r).zIndex,10)||0)&&(t=o);else t=o}else t=o}return t}(s);return r.activeDrops[h]||null}function Re(e,t,n){var r=e.dropState,i={enter:null,leave:null,activate:null,deactivate:null,move:null,drop:null};return"dragstart"===n.type&&(i.activate=new Pe(r,n,"dropactivate"),i.activate.target=null,i.activate.dropzone=null),"dragend"===n.type&&(i.deactivate=new Pe(r,n,"dropdeactivate"),i.deactivate.target=null,i.deactivate.dropzone=null),r.rejected||(r.cur.element!==r.prev.element&&(r.prev.dropzone&&(i.leave=new Pe(r,n,"dragleave"),n.dragLeave=i.leave.target=r.prev.element,n.prevDropzone=i.leave.dropzone=r.prev.dropzone),r.cur.dropzone&&(i.enter=new Pe(r,n,"dragenter"),n.dragEnter=r.cur.element,n.dropzone=r.cur.dropzone)),"dragend"===n.type&&r.cur.dropzone&&(i.drop=new Pe(r,n,"drop"),n.dropzone=r.cur.dropzone,n.relatedTarget=r.cur.element),"dragmove"===n.type&&r.cur.dropzone&&(i.move=new Pe(r,n,"dropmove"),n.dropzone=r.cur.dropzone)),i}function Me(e,t){var n=e.dropState,r=n.activeDrops,i=n.cur,o=n.prev;t.leave&&o.dropzone.fire(t.leave),t.enter&&i.dropzone.fire(t.enter),t.move&&i.dropzone.fire(t.move),t.drop&&i.dropzone.fire(t.drop),t.deactivate&&Ae(r,t.deactivate),n.prev.dropzone=i.dropzone,n.prev.element=i.element}function je(e,t){var n=e.interaction,r=e.iEvent,i=e.event;if("dragmove"===r.type||"dragend"===r.type){var o=n.dropState;t.dynamicDrop&&(o.activeDrops=De(t,n.element));var s=r,a=Fe(n,s,i);o.rejected=o.rejected&&!!a&&a.dropzone===o.cur.dropzone&&a.element===o.cur.element,o.cur.dropzone=a&&a.dropzone,o.cur.element=a&&a.element,o.events=Re(n,0,s)}}var Ie={id:"actions/drop",install:function(e){var t=e.actions,n=e.interactStatic,r=e.Interactable,i=e.defaults;e.usePlugin(j),r.prototype.dropzone=function(e){return function(e,t){if(_(t)){if(e.options.drop.enabled=!1!==t.enabled,t.listeners){var n=se(t.listeners),r=Object.keys(n).reduce((function(e,t){return e[/^(enter|leave)/.test(t)?"drag".concat(t):/^(activate|deactivate|move)/.test(t)?"drop".concat(t):t]=n[t],e}),{}),i=e.options.drop.listeners;i&&e.off(i),e.on(r),e.options.drop.listeners=r}return T(t.ondrop)&&e.on("drop",t.ondrop),T(t.ondropactivate)&&e.on("dropactivate",t.ondropactivate),T(t.ondropdeactivate)&&e.on("dropdeactivate",t.ondropdeactivate),T(t.ondragenter)&&e.on("dragenter",t.ondragenter),T(t.ondragleave)&&e.on("dragleave",t.ondragleave),T(t.ondropmove)&&e.on("dropmove",t.ondropmove),/^(pointer|center)$/.test(t.overlap)?e.options.drop.overlap=t.overlap:S(t.overlap)&&(e.options.drop.overlap=Math.max(Math.min(1,t.overlap),0)),"accept"in t&&(e.options.drop.accept=t.accept),"checker"in t&&(e.options.drop.checker=t.checker),e}return k(t)?(e.options.drop.enabled=t,e):e.options.drop}(this,e)},r.prototype.dropCheck=function(e,t,n,r,i,o){return function(e,t,n,r,i,o,s){var a=!1;if(!(s=s||e.getRect(o)))return!!e.options.drop.checker&&e.options.drop.checker(t,n,a,e,o,r,i);var c=e.options.drop.overlap;if("pointer"===c){var u=oe(r,i,"drag"),l=ve(t);l.x+=u.x,l.y+=u.y;var p=l.x>s.left&&l.x<s.right,d=l.y>s.top&&l.y<s.bottom;a=p&&d}var f=r.getRect(i);if(f&&"center"===c){var h=f.left+f.width/2,v=f.top+f.height/2;a=h>=s.left&&h<=s.right&&v>=s.top&&v<=s.bottom}return f&&S(c)&&(a=Math.max(0,Math.min(s.right,f.right)-Math.max(s.left,f.left))*Math.max(0,Math.min(s.bottom,f.bottom)-Math.max(s.top,f.top))/(f.width*f.height)>=c),e.options.drop.checker&&(a=e.options.drop.checker(t,n,a,e,o,r,i)),a}(this,e,t,n,r,i,o)},n.dynamicDrop=function(t){return k(t)?(e.dynamicDrop=t,n):e.dynamicDrop},Q(t.phaselessTypes,{dragenter:!0,dragleave:!0,dropactivate:!0,dropdeactivate:!0,dropmove:!0,drop:!0}),t.methodDict.drop="dropzone",e.dynamicDrop=!1,i.actions.drop=Ie.defaults},listeners:{"interactions:before-action-start":function(e){var t=e.interaction;"drag"===t.prepared.name&&(t.dropState={cur:{dropzone:null,element:null},prev:{dropzone:null,element:null},rejected:null,events:null,activeDrops:[]})},"interactions:after-action-start":function(e,t){var n=e.interaction,r=(e.event,e.iEvent);if("drag"===n.prepared.name){var i=n.dropState;i.activeDrops=[],i.events={},i.activeDrops=De(t,n.element),i.events=Re(n,0,r),i.events.activate&&(Ae(i.activeDrops,i.events.activate),t.fire("actions/drop:start",{interaction:n,dragEvent:r}))}},"interactions:action-move":je,"interactions:after-action-move":function(e,t){var n=e.interaction,r=e.iEvent;if("drag"===n.prepared.name){var i=n.dropState;Me(n,i.events),t.fire("actions/drop:move",{interaction:n,dragEvent:r}),i.events={}}},"interactions:action-end":function(e,t){if("drag"===e.interaction.prepared.name){var n=e.interaction,r=e.iEvent;je(e,t),Me(n,n.dropState.events),t.fire("actions/drop:end",{interaction:n,dragEvent:r})}},"interactions:stop":function(e){var t=e.interaction;if("drag"===t.prepared.name){var n=t.dropState;n&&(n.activeDrops=null,n.events=null,n.cur.dropzone=null,n.cur.element=null,n.prev.dropzone=null,n.prev.element=null,n.rejected=!1)}}},getActiveDrops:De,getDrop:Fe,getDropEvents:Re,fireDropEvents:Me,filterEventType:function(e){return 0===e.search("drag")||0===e.search("drop")},defaults:{enabled:!1,accept:null,overlap:"pointer"}},Ne=Ie;function Le(e){var t=e.interaction,n=e.iEvent,r=e.phase;if("gesture"===t.prepared.name){var i=t.pointers.map((function(e){return e.pointer})),o="start"===r,s="end"===r,a=t.interactable.options.deltaSource;if(n.touches=[i[0],i[1]],o)n.distance=xe(i,a),n.box=be(i),n.scale=1,n.ds=0,n.angle=we(i,a),n.da=0,t.gesture.startDistance=n.distance,t.gesture.startAngle=n.angle;else if(s||t.pointers.length<2){var c=t.prevEvent;n.distance=c.distance,n.box=c.box,n.scale=c.scale,n.ds=0,n.angle=c.angle,n.da=0}else n.distance=xe(i,a),n.box=be(i),n.scale=n.distance/t.gesture.startDistance,n.angle=we(i,a),n.ds=n.scale-t.gesture.scale,n.da=n.angle-t.gesture.angle;t.gesture.distance=n.distance,t.gesture.angle=n.angle,S(n.scale)&&n.scale!==1/0&&!isNaN(n.scale)&&(t.gesture.scale=n.scale)}}var Be={id:"actions/gesture",before:["actions/drag","actions/resize"],install:function(e){var t=e.actions,n=e.Interactable,r=e.defaults;n.prototype.gesturable=function(e){return _(e)?(this.options.gesture.enabled=!1!==e.enabled,this.setPerAction("gesture",e),this.setOnEvents("gesture",e),this):k(e)?(this.options.gesture.enabled=e,this):this.options.gesture},t.map.gesture=Be,t.methodDict.gesture="gesturable",r.actions.gesture=Be.defaults},listeners:{"interactions:action-start":Le,"interactions:action-move":Le,"interactions:action-end":Le,"interactions:new":function(e){e.interaction.gesture={angle:0,distance:0,scale:1,startAngle:0,startDistance:0}},"auto-start:check":function(e){if(!(e.interaction.pointers.length<2)){var t=e.interactable.options.gesture;if(t&&t.enabled)return e.action={name:"gesture"},!1}}},defaults:{},getCursor:function(){return""},filterEventType:function(e){return 0===e.search("gesture")}},He=Be;function qe(e,t,n,r,i,o,s){if(!t)return!1;if(!0===t){var a=S(o.width)?o.width:o.right-o.left,c=S(o.height)?o.height:o.bottom-o.top;if(s=Math.min(s,Math.abs(("left"===e||"right"===e?a:c)/2)),a<0&&("left"===e?e="right":"right"===e&&(e="left")),c<0&&("top"===e?e="bottom":"bottom"===e&&(e="top")),"left"===e){var u=a>=0?o.left:o.right;return n.x<u+s}if("top"===e){var l=c>=0?o.top:o.bottom;return n.y<l+s}if("right"===e)return n.x>(a>=0?o.right:o.left)-s;if("bottom"===e)return n.y>(c>=0?o.bottom:o.top)-s}return!!P(r)&&(P(t)?t===r:$(r,t,i))}function ze(e){var t=e.iEvent,n=e.interaction;if("resize"===n.prepared.name&&n.resizeAxes){var r=t;n.interactable.options.resize.square?("y"===n.resizeAxes?r.delta.x=r.delta.y:r.delta.y=r.delta.x,r.axes="xy"):(r.axes=n.resizeAxes,"x"===n.resizeAxes?r.delta.y=0:"y"===n.resizeAxes&&(r.delta.x=0))}}var We,Ue,Ve={id:"actions/resize",before:["actions/drag"],install:function(e){var t=e.actions,n=e.browser,r=e.Interactable,i=e.defaults;Ve.cursors=function(e){return e.isIe9?{x:"e-resize",y:"s-resize",xy:"se-resize",top:"n-resize",left:"w-resize",bottom:"s-resize",right:"e-resize",topleft:"se-resize",bottomright:"se-resize",topright:"ne-resize",bottomleft:"ne-resize"}:{x:"ew-resize",y:"ns-resize",xy:"nwse-resize",top:"ns-resize",left:"ew-resize",bottom:"ns-resize",right:"ew-resize",topleft:"nwse-resize",bottomright:"nwse-resize",topright:"nesw-resize",bottomleft:"nesw-resize"}}(n),Ve.defaultMargin=n.supportsTouch||n.supportsPointerEvent?20:10,r.prototype.resizable=function(t){return function(e,t,n){return _(t)?(e.options.resize.enabled=!1!==t.enabled,e.setPerAction("resize",t),e.setOnEvents("resize",t),O(t.axis)&&/^x$|^y$|^xy$/.test(t.axis)?e.options.resize.axis=t.axis:null===t.axis&&(e.options.resize.axis=n.defaults.actions.resize.axis),k(t.preserveAspectRatio)?e.options.resize.preserveAspectRatio=t.preserveAspectRatio:k(t.square)&&(e.options.resize.square=t.square),e):k(t)?(e.options.resize.enabled=t,e):e.options.resize}(this,t,e)},t.map.resize=Ve,t.methodDict.resize="resizable",i.actions.resize=Ve.defaults},listeners:{"interactions:new":function(e){e.interaction.resizeAxes="xy"},"interactions:action-start":function(e){!function(e){var t=e.iEvent,n=e.interaction;if("resize"===n.prepared.name&&n.prepared.edges){var r=t,i=n.rect;n._rects={start:Q({},i),corrected:Q({},i),previous:Q({},i),delta:{left:0,right:0,width:0,top:0,bottom:0,height:0}},r.edges=n.prepared.edges,r.rect=n._rects.corrected,r.deltaRect=n._rects.delta}}(e),ze(e)},"interactions:action-move":function(e){!function(e){var t=e.iEvent,n=e.interaction;if("resize"===n.prepared.name&&n.prepared.edges){var r=t,i=n.interactable.options.resize.invert,o="reposition"===i||"negate"===i,s=n.rect,a=n._rects,c=a.start,u=a.corrected,l=a.delta,p=a.previous;if(Q(p,u),o){if(Q(u,s),"reposition"===i){if(u.top>u.bottom){var d=u.top;u.top=u.bottom,u.bottom=d}if(u.left>u.right){var f=u.left;u.left=u.right,u.right=f}}}else u.top=Math.min(s.top,c.bottom),u.bottom=Math.max(s.bottom,c.top),u.left=Math.min(s.left,c.right),u.right=Math.max(s.right,c.left);for(var h in u.width=u.right-u.left,u.height=u.bottom-u.top,u)l[h]=u[h]-p[h];r.edges=n.prepared.edges,r.rect=u,r.deltaRect=l}}(e),ze(e)},"interactions:action-end":function(e){var t=e.iEvent,n=e.interaction;if("resize"===n.prepared.name&&n.prepared.edges){var r=t;r.edges=n.prepared.edges,r.rect=n._rects.corrected,r.deltaRect=n._rects.delta}},"auto-start:check":function(e){var t=e.interaction,n=e.interactable,r=e.element,i=e.rect,o=e.buttons;if(i){var s=Q({},t.coords.cur.page),a=n.options.resize;if(a&&a.enabled&&(!t.pointerIsDown||!/mouse|pointer/.test(t.pointerType)||o&a.mouseButtons)){if(_(a.edges)){var c={left:!1,right:!1,top:!1,bottom:!1};for(var u in c)c[u]=qe(u,a.edges[u],s,t._latestPointer.eventTarget,r,i,a.margin||Ve.defaultMargin);c.left=c.left&&!c.right,c.top=c.top&&!c.bottom,(c.left||c.right||c.top||c.bottom)&&(e.action={name:"resize",edges:c})}else{var l="y"!==a.axis&&s.x>i.right-Ve.defaultMargin,p="x"!==a.axis&&s.y>i.bottom-Ve.defaultMargin;(l||p)&&(e.action={name:"resize",axes:(l?"x":"")+(p?"y":"")})}return!e.action&&void 0}}}},defaults:{square:!1,preserveAspectRatio:!1,axis:"xy",margin:NaN,edges:null,invert:"none"},cursors:null,getCursor:function(e){var t=e.edges,n=e.axis,r=e.name,i=Ve.cursors,o=null;if(n)o=i[r+n];else if(t){for(var s="",a=0,c=["top","bottom","left","right"];a<c.length;a++){var u=c[a];t[u]&&(s+=u)}o=i[s]}return o},filterEventType:function(e){return 0===e.search("resize")},defaultMargin:null},Ye=Ve,$e={id:"actions",install:function(e){e.usePlugin(He),e.usePlugin(Ye),e.usePlugin(j),e.usePlugin(Ne)}},Xe=0,Ge=function(e){return We(e)},Ke=function(e){return Ue(e)},Je=function(e){if(We=e.requestAnimationFrame,Ue=e.cancelAnimationFrame,!We)for(var t=["ms","moz","webkit","o"],n=0;n<t.length;n++){var r=t[n];We=e["".concat(r,"RequestAnimationFrame")],Ue=e["".concat(r,"CancelAnimationFrame")]||e["".concat(r,"CancelRequestAnimationFrame")]}We=We&&We.bind(e),Ue=Ue&&Ue.bind(e),We||(We=function(t){var n=Date.now(),r=Math.max(0,16-(n-Xe)),i=e.setTimeout((function(){t(n+r)}),r);return Xe=n+r,i},Ue=function(e){return clearTimeout(e)})},Ze={defaults:{enabled:!1,margin:60,container:null,speed:300},now:Date.now,interaction:null,i:0,x:0,y:0,isScrolling:!1,prevTime:0,margin:0,speed:0,start:function(e){Ze.isScrolling=!0,Ke(Ze.i),e.autoScroll=Ze,Ze.interaction=e,Ze.prevTime=Ze.now(),Ze.i=Ge(Ze.scroll)},stop:function(){Ze.isScrolling=!1,Ze.interaction&&(Ze.interaction.autoScroll=null),Ke(Ze.i)},scroll:function(){var e=Ze.interaction,t=e.interactable,n=e.element,r=e.prepared.name,i=t.options[r].autoScroll,o=Qe(i.container,t,n),s=Ze.now(),a=(s-Ze.prevTime)/1e3,c=i.speed*a;if(c>=1){var u={x:Ze.x*c,y:Ze.y*c};if(u.x||u.y){var l=et(o);C(o)?o.scrollBy(u.x,u.y):o&&(o.scrollLeft+=u.x,o.scrollTop+=u.y);var p=et(o),d={x:p.x-l.x,y:p.y-l.y};(d.x||d.y)&&t.fire({type:"autoscroll",target:n,interactable:t,delta:d,interaction:e,container:o})}Ze.prevTime=s}Ze.isScrolling&&(Ke(Ze.i),Ze.i=Ge(Ze.scroll))},check:function(e,t){var n;return null==(n=e.options[t].autoScroll)?void 0:n.enabled},onInteractionMove:function(e){var t=e.interaction,n=e.pointer;if(t.interacting()&&Ze.check(t.interactable,t.prepared.name))if(t.simulation)Ze.x=Ze.y=0;else{var r,i,o,s,a=t.interactable,c=t.element,u=t.prepared.name,l=a.options[u].autoScroll,p=Qe(l.container,a,c);if(C(p))s=n.clientX<Ze.margin,r=n.clientY<Ze.margin,i=n.clientX>p.innerWidth-Ze.margin,o=n.clientY>p.innerHeight-Ze.margin;else{var d=G(p);s=n.clientX<d.left+Ze.margin,r=n.clientY<d.top+Ze.margin,i=n.clientX>d.right-Ze.margin,o=n.clientY>d.bottom-Ze.margin}Ze.x=i?1:s?-1:0,Ze.y=o?1:r?-1:0,Ze.isScrolling||(Ze.margin=l.margin,Ze.speed=l.speed,Ze.start(t))}}};function Qe(e,t,n){return(O(e)?ee(e,t,n):e)||b(n)}function et(e){return C(e)&&(e=window.document.body),{x:e.scrollLeft,y:e.scrollTop}}var tt={id:"auto-scroll",install:function(e){var t=e.defaults,n=e.actions;e.autoScroll=Ze,Ze.now=function(){return e.now()},n.phaselessTypes.autoscroll=!0,t.perAction.autoScroll=Ze.defaults},listeners:{"interactions:new":function(e){e.interaction.autoScroll=null},"interactions:destroy":function(e){e.interaction.autoScroll=null,Ze.stop(),Ze.interaction&&(Ze.interaction=null)},"interactions:stop":Ze.stop,"interactions:action-move":function(e){return Ze.onInteractionMove(e)}}},nt=tt;function rt(e,t){var n=!1;return function(){return n||(m.console.warn(t),n=!0),e.apply(this,arguments)}}function it(e,t){return e.name=t.name,e.axis=t.axis,e.edges=t.edges,e}function ot(e){return k(e)?(this.options.styleCursor=e,this):null===e?(delete this.options.styleCursor,this):this.options.styleCursor}function st(e){return T(e)?(this.options.actionChecker=e,this):null===e?(delete this.options.actionChecker,this):this.options.actionChecker}var at={id:"auto-start/interactableMethods",install:function(e){var t=e.Interactable;t.prototype.getAction=function(t,n,r,i){var o=function(e,t,n,r,i){var o=e.getRect(r),s={action:null,interactable:e,interaction:n,element:r,rect:o,buttons:t.buttons||{0:1,1:4,3:8,4:16}[t.button]};return i.fire("auto-start:check",s),s.action}(this,n,r,i,e);return this.options.actionChecker?this.options.actionChecker(t,n,o,this,i,r):o},t.prototype.ignoreFrom=rt((function(e){return this._backCompatOption("ignoreFrom",e)}),"Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue})."),t.prototype.allowFrom=rt((function(e){return this._backCompatOption("allowFrom",e)}),"Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue})."),t.prototype.actionChecker=st,t.prototype.styleCursor=ot}};function ct(e,t,n,r,i){return t.testIgnoreAllow(t.options[e.name],n,r)&&t.options[e.name].enabled&&dt(t,n,e,i)?e:null}function ut(e,t,n,r,i,o,s){for(var a=0,c=r.length;a<c;a++){var u=r[a],l=i[a],p=u.getAction(t,n,e,l);if(p){var d=ct(p,u,l,o,s);if(d)return{action:d,interactable:u,element:l}}}return{action:null,interactable:null,element:null}}function lt(e,t,n,r,i){var o=[],s=[],a=r;function c(e){o.push(e),s.push(a)}for(;P(a);){o=[],s=[],i.interactables.forEachMatch(a,c);var u=ut(e,t,n,o,s,r,i);if(u.action&&!u.interactable.options[u.action.name].manualStart)return u;a=W(a)}return{action:null,interactable:null,element:null}}function pt(e,t,n){var r=t.action,i=t.interactable,o=t.element;r=r||{name:null},e.interactable=i,e.element=o,it(e.prepared,r),e.rect=i&&r.name?i.getRect(o):null,vt(e,n),n.fire("autoStart:prepared",{interaction:e})}function dt(e,t,n,r){var i=e.options,o=i[n.name].max,s=i[n.name].maxPerElement,a=r.autoStart.maxInteractions,c=0,u=0,l=0;if(!(o&&s&&a))return!1;for(var p=0,d=r.interactions.list;p<d.length;p++){var f=d[p],h=f.prepared.name;if(f.interacting()){if(++c>=a)return!1;if(f.interactable===e){if((u+=h===n.name?1:0)>=o)return!1;if(f.element===t&&(l++,h===n.name&&l>=s))return!1}}}return a>0}function ft(e,t){return S(e)?(t.autoStart.maxInteractions=e,this):t.autoStart.maxInteractions}function ht(e,t,n){var r=n.autoStart.cursorElement;r&&r!==e&&(r.style.cursor=""),e.ownerDocument.documentElement.style.cursor=t,e.style.cursor=t,n.autoStart.cursorElement=t?e:null}function vt(e,t){var n=e.interactable,r=e.element,i=e.prepared;if("mouse"===e.pointerType&&n&&n.options.styleCursor){var o="";if(i.name){var s=n.options[i.name].cursorChecker;o=T(s)?s(i,n,r,e._interacting):t.actions.map[i.name].getCursor(i)}ht(e.element,o||"",t)}else t.autoStart.cursorElement&&ht(t.autoStart.cursorElement,"",t)}var gt={id:"auto-start/base",before:["actions"],install:function(e){var t=e.interactStatic,n=e.defaults;e.usePlugin(at),n.base.actionChecker=null,n.base.styleCursor=!0,Q(n.perAction,{manualStart:!1,max:1/0,maxPerElement:1,allowFrom:null,ignoreFrom:null,mouseButtons:1}),t.maxInteractions=function(t){return ft(t,e)},e.autoStart={maxInteractions:1/0,withinInteractionLimit:dt,cursorElement:null}},listeners:{"interactions:down":function(e,t){var n=e.interaction,r=e.pointer,i=e.event,o=e.eventTarget;n.interacting()||pt(n,lt(n,r,i,o,t),t)},"interactions:move":function(e,t){!function(e,t){var n=e.interaction,r=e.pointer,i=e.event,o=e.eventTarget;"mouse"!==n.pointerType||n.pointerIsDown||n.interacting()||pt(n,lt(n,r,i,o,t),t)}(e,t),function(e,t){var n=e.interaction;if(n.pointerIsDown&&!n.interacting()&&n.pointerWasMoved&&n.prepared.name){t.fire("autoStart:before-start",e);var r=n.interactable,i=n.prepared.name;i&&r&&(r.options[i].manualStart||!dt(r,n.element,n.prepared,t)?n.stop():(n.start(n.prepared,r,n.element),vt(n,t)))}}(e,t)},"interactions:stop":function(e,t){var n=e.interaction,r=n.interactable;r&&r.options.styleCursor&&ht(n.element,"",t)}},maxInteractions:ft,withinInteractionLimit:dt,validateAction:ct},mt=gt,yt={id:"auto-start/dragAxis",listeners:{"autoStart:before-start":function(e,t){var n=e.interaction,r=e.eventTarget,i=e.dx,o=e.dy;if("drag"===n.prepared.name){var s=Math.abs(i),a=Math.abs(o),c=n.interactable.options.drag,u=c.startAxis,l=s>a?"x":s<a?"y":"xy";if(n.prepared.axis="start"===c.lockAxis?l[0]:c.lockAxis,"xy"!==l&&"xy"!==u&&u!==l){n.prepared.name=null;for(var p=r,d=function(e){if(e!==n.interactable){var i=n.interactable.options.drag;if(!i.manualStart&&e.testIgnoreAllow(i,p,r)){var o=e.getAction(n.downPointer,n.downEvent,n,p);if(o&&"drag"===o.name&&function(e,t){if(!t)return!1;var n=t.options.drag.startAxis;return"xy"===e||"xy"===n||n===e}(l,e)&&mt.validateAction(o,e,p,r,t))return e}}};P(p);){var f=t.interactables.forEachMatch(p,d);if(f){n.prepared.name="drag",n.interactable=f,n.element=p;break}p=W(p)}}}}}};function bt(e){var t=e.prepared&&e.prepared.name;if(!t)return null;var n=e.interactable.options;return n[t].hold||n[t].delay}var xt={id:"auto-start/hold",install:function(e){var t=e.defaults;e.usePlugin(mt),t.perAction.hold=0,t.perAction.delay=0},listeners:{"interactions:new":function(e){e.interaction.autoStartHoldTimer=null},"autoStart:prepared":function(e){var t=e.interaction,n=bt(t);n>0&&(t.autoStartHoldTimer=setTimeout((function(){t.start(t.prepared,t.interactable,t.element)}),n))},"interactions:move":function(e){var t=e.interaction,n=e.duplicate;t.autoStartHoldTimer&&t.pointerWasMoved&&!n&&(clearTimeout(t.autoStartHoldTimer),t.autoStartHoldTimer=null)},"autoStart:before-start":function(e){var t=e.interaction;bt(t)>0&&(t.prepared.name=null)}},getHoldDuration:bt},wt=xt,Ct={id:"auto-start",install:function(e){e.usePlugin(mt),e.usePlugin(wt),e.usePlugin(yt)}},Et=function(e){return/^(always|never|auto)$/.test(e)?(this.options.preventDefault=e,this):k(e)?(this.options.preventDefault=e?"always":"never",this):this.options.preventDefault};function _t(e){var t=e.interaction,n=e.event;t.interactable&&t.interactable.checkAndPreventDefault(n)}var Tt={id:"core/interactablePreventDefault",install:function(e){var t=e.Interactable;t.prototype.preventDefault=Et,t.prototype.checkAndPreventDefault=function(t){return function(e,t,n){var r=e.options.preventDefault;if("never"!==r)if("always"!==r){if(t.events.supportsPassive&&/^touch(start|move)$/.test(n.type)){var i=b(n.target).document,o=t.getDocOptions(i);if(!o||!o.events||!1!==o.events.passive)return}/^(mouse|pointer|touch)*(down|start)/i.test(n.type)||P(n.target)&&U(n.target,"input,select,textarea,[contenteditable=true],[contenteditable=true] *")||n.preventDefault()}else n.preventDefault()}(this,e,t)},e.interactions.docEvents.push({type:"dragstart",listener:function(t){for(var n=0,r=e.interactions.list;n<r.length;n++){var i=r[n];if(i.element&&(i.element===t.target||q(i.element,t.target)))return void i.interactable.checkAndPreventDefault(t)}}})},listeners:["down","move","up","cancel"].reduce((function(e,t){return e["interactions:".concat(t)]=_t,e}),{})};function St(e,t){if(t.phaselessTypes[e])return!0;for(var n in t.map)if(0===e.indexOf(n)&&e.substr(n.length)in t.phases)return!0;return!1}function kt(e){var t={};for(var n in e){var r=e[n];A(r)?t[n]=kt(r):D(r)?t[n]=Se(r):t[n]=r}return t}var Ot=function(){function e(t){i(this,e),this.states=[],this.startOffset={left:0,right:0,top:0,bottom:0},this.startDelta=void 0,this.result=void 0,this.endResult=void 0,this.startEdges=void 0,this.edges=void 0,this.interaction=void 0,this.interaction=t,this.result=Pt(),this.edges={left:!1,right:!1,top:!1,bottom:!1}}return s(e,[{key:"start",value:function(e,t){var n,r,i=e.phase,o=this.interaction,s=function(e){var t=e.interactable.options[e.prepared.name],n=t.modifiers;return n&&n.length?n:["snap","snapSize","snapEdges","restrict","restrictEdges","restrictSize"].map((function(e){var n=t[e];return n&&n.enabled&&{options:n,methods:n._methods}})).filter((function(e){return!!e}))}(o);this.prepareStates(s),this.startEdges=Q({},o.edges),this.edges=Q({},this.startEdges),this.startOffset=(r=t,(n=o.rect)?{left:r.x-n.left,top:r.y-n.top,right:n.right-r.x,bottom:n.bottom-r.y}:{left:0,top:0,right:0,bottom:0}),this.startDelta={x:0,y:0};var a=this.fillArg({phase:i,pageCoords:t,preEnd:!1});return this.result=Pt(),this.startAll(a),this.result=this.setAll(a)}},{key:"fillArg",value:function(e){var t=this.interaction;return e.interaction=t,e.interactable=t.interactable,e.element=t.element,e.rect||(e.rect=t.rect),e.edges||(e.edges=this.startEdges),e.startOffset=this.startOffset,e}},{key:"startAll",value:function(e){for(var t=0,n=this.states;t<n.length;t++){var r=n[t];r.methods.start&&(e.state=r,r.methods.start(e))}}},{key:"setAll",value:function(e){var t=e.phase,n=e.preEnd,r=e.skipModifiers,i=e.rect,o=e.edges;e.coords=Q({},e.pageCoords),e.rect=Q({},i),e.edges=Q({},o);for(var s=r?this.states.slice(r):this.states,a=Pt(e.coords,e.rect),c=0;c<s.length;c++){var u,l=s[c],p=l.options,d=Q({},e.coords),f=null;null!=(u=l.methods)&&u.set&&this.shouldDo(p,n,t)&&(e.state=l,f=l.methods.set(e),ie(e.edges,e.rect,{x:e.coords.x-d.x,y:e.coords.y-d.y})),a.eventProps.push(f)}Q(this.edges,e.edges),a.delta.x=e.coords.x-e.pageCoords.x,a.delta.y=e.coords.y-e.pageCoords.y,a.rectDelta.left=e.rect.left-i.left,a.rectDelta.right=e.rect.right-i.right,a.rectDelta.top=e.rect.top-i.top,a.rectDelta.bottom=e.rect.bottom-i.bottom;var h=this.result.coords,v=this.result.rect;if(h&&v){var g=a.rect.left!==v.left||a.rect.right!==v.right||a.rect.top!==v.top||a.rect.bottom!==v.bottom;a.changed=g||h.x!==a.coords.x||h.y!==a.coords.y}return a}},{key:"applyToInteraction",value:function(e){var t=this.interaction,n=e.phase,r=t.coords.cur,i=t.coords.start,o=this.result,s=this.startDelta,a=o.delta;"start"===n&&Q(this.startDelta,o.delta);for(var c=0,u=[[i,s],[r,a]];c<u.length;c++){var l=u[c],p=l[0],d=l[1];p.page.x+=d.x,p.page.y+=d.y,p.client.x+=d.x,p.client.y+=d.y}var f=this.result.rectDelta,h=e.rect||t.rect;h.left+=f.left,h.right+=f.right,h.top+=f.top,h.bottom+=f.bottom,h.width=h.right-h.left,h.height=h.bottom-h.top}},{key:"setAndApply",value:function(e){var t=this.interaction,n=e.phase,r=e.preEnd,i=e.skipModifiers,o=this.setAll(this.fillArg({preEnd:r,phase:n,pageCoords:e.modifiedCoords||t.coords.cur.page}));if(this.result=o,!o.changed&&(!i||i<this.states.length)&&t.interacting())return!1;if(e.modifiedCoords){var s=t.coords.cur.page,a={x:e.modifiedCoords.x-s.x,y:e.modifiedCoords.y-s.y};o.coords.x+=a.x,o.coords.y+=a.y,o.delta.x+=a.x,o.delta.y+=a.y}this.applyToInteraction(e)}},{key:"beforeEnd",value:function(e){var t=e.interaction,n=e.event,r=this.states;if(r&&r.length){for(var i=!1,o=0;o<r.length;o++){var s=r[o];e.state=s;var a=s.options,c=s.methods,u=c.beforeEnd&&c.beforeEnd(e);if(u)return this.endResult=u,!1;i=i||!i&&this.shouldDo(a,!0,e.phase,!0)}i&&t.move({event:n,preEnd:!0})}}},{key:"stop",value:function(e){var t=e.interaction;if(this.states&&this.states.length){var n=Q({states:this.states,interactable:t.interactable,element:t.element,rect:null},e);this.fillArg(n);for(var r=0,i=this.states;r<i.length;r++){var o=i[r];n.state=o,o.methods.stop&&o.methods.stop(n)}this.states=null,this.endResult=null}}},{key:"prepareStates",value:function(e){this.states=[];for(var t=0;t<e.length;t++){var n=e[t],r=n.options,i=n.methods,o=n.name;this.states.push({options:r,methods:i,index:t,name:o})}return this.states}},{key:"restoreInteractionCoords",value:function(e){var t=e.interaction,n=t.coords,r=t.rect,i=t.modification;if(i.result){for(var o=i.startDelta,s=i.result,a=s.delta,c=s.rectDelta,u=0,l=[[n.start,o],[n.cur,a]];u<l.length;u++){var p=l[u],d=p[0],f=p[1];d.page.x-=f.x,d.page.y-=f.y,d.client.x-=f.x,d.client.y-=f.y}r.left-=c.left,r.right-=c.right,r.top-=c.top,r.bottom-=c.bottom}}},{key:"shouldDo",value:function(e,t,n,r){return!(!e||!1===e.enabled||r&&!e.endOnly||e.endOnly&&!t||"start"===n&&!e.setStart)}},{key:"copyFrom",value:function(e){this.startOffset=e.startOffset,this.startDelta=e.startDelta,this.startEdges=e.startEdges,this.edges=e.edges,this.states=e.states.map((function(e){return kt(e)})),this.result=Pt(Q({},e.result.coords),Q({},e.result.rect))}},{key:"destroy",value:function(){for(var e in this)this[e]=null}}]),e}();function Pt(e,t){return{rect:t,coords:e,delta:{x:0,y:0},rectDelta:{left:0,right:0,top:0,bottom:0},eventProps:[],changed:!0}}function At(e,t){var n=e.defaults,r={start:e.start,set:e.set,beforeEnd:e.beforeEnd,stop:e.stop},i=function(e){var i=e||{};for(var o in i.enabled=!1!==i.enabled,n)o in i||(i[o]=n[o]);var s={options:i,methods:r,name:t,enable:function(){return i.enabled=!0,s},disable:function(){return i.enabled=!1,s}};return s};return t&&"string"==typeof t&&(i._defaults=n,i._methods=r),i}function Dt(e){var t=e.iEvent,n=e.interaction.modification.result;n&&(t.modifiers=n.eventProps)}var Ft={id:"modifiers/base",before:["actions"],install:function(e){e.defaults.perAction.modifiers=[]},listeners:{"interactions:new":function(e){var t=e.interaction;t.modification=new Ot(t)},"interactions:before-action-start":function(e){var t=e.interaction,n=e.interaction.modification;n.start(e,t.coords.start.page),t.edges=n.edges,n.applyToInteraction(e)},"interactions:before-action-move":function(e){var t=e.interaction,n=t.modification,r=n.setAndApply(e);return t.edges=n.edges,r},"interactions:before-action-end":function(e){var t=e.interaction,n=t.modification,r=n.beforeEnd(e);return t.edges=n.startEdges,r},"interactions:action-start":Dt,"interactions:action-move":Dt,"interactions:action-end":Dt,"interactions:after-action-start":function(e){return e.interaction.modification.restoreInteractionCoords(e)},"interactions:after-action-move":function(e){return e.interaction.modification.restoreInteractionCoords(e)},"interactions:stop":function(e){return e.interaction.modification.stop(e)}}},Rt=Ft,Mt={base:{preventDefault:"auto",deltaSource:"page"},perAction:{enabled:!1,origin:{x:0,y:0}},actions:{}},jt=function(e){c(n,e);var t=d(n);function n(e,r,o,s,a,c,u){var l;i(this,n),(l=t.call(this,e)).relatedTarget=null,l.screenX=void 0,l.screenY=void 0,l.button=void 0,l.buttons=void 0,l.ctrlKey=void 0,l.shiftKey=void 0,l.altKey=void 0,l.metaKey=void 0,l.page=void 0,l.client=void 0,l.delta=void 0,l.rect=void 0,l.x0=void 0,l.y0=void 0,l.t0=void 0,l.dt=void 0,l.duration=void 0,l.clientX0=void 0,l.clientY0=void 0,l.velocity=void 0,l.speed=void 0,l.swipe=void 0,l.axes=void 0,l.preEnd=void 0,a=a||e.element;var d=e.interactable,f=(d&&d.options||Mt).deltaSource,h=oe(d,a,o),v="start"===s,g="end"===s,m=v?p(l):e.prevEvent,y=v?e.coords.start:g?{page:m.page,client:m.client,timeStamp:e.coords.cur.timeStamp}:e.coords.cur;return l.page=Q({},y.page),l.client=Q({},y.client),l.rect=Q({},e.rect),l.timeStamp=y.timeStamp,g||(l.page.x-=h.x,l.page.y-=h.y,l.client.x-=h.x,l.client.y-=h.y),l.ctrlKey=r.ctrlKey,l.altKey=r.altKey,l.shiftKey=r.shiftKey,l.metaKey=r.metaKey,l.button=r.button,l.buttons=r.buttons,l.target=a,l.currentTarget=a,l.preEnd=c,l.type=u||o+(s||""),l.interactable=d,l.t0=v?e.pointers[e.pointers.length-1].downTime:m.t0,l.x0=e.coords.start.page.x-h.x,l.y0=e.coords.start.page.y-h.y,l.clientX0=e.coords.start.client.x-h.x,l.clientY0=e.coords.start.client.y-h.y,l.delta=v||g?{x:0,y:0}:{x:l[f].x-m[f].x,y:l[f].y-m[f].y},l.dt=e.coords.delta.timeStamp,l.duration=l.timeStamp-l.t0,l.velocity=Q({},e.coords.velocity[f]),l.speed=ce(l.velocity.x,l.velocity.y),l.swipe=g||"inertiastart"===s?l.getSwipe():null,l}return s(n,[{key:"getSwipe",value:function(){var e=this._interaction;if(e.prevEvent.speed<600||this.timeStamp-e.prevEvent.timeStamp>150)return null;var t=180*Math.atan2(e.prevEvent.velocityY,e.prevEvent.velocityX)/Math.PI;t<0&&(t+=360);var n=112.5<=t&&t<247.5,r=202.5<=t&&t<337.5;return{up:r,down:!r&&22.5<=t&&t<157.5,left:n,right:!n&&(292.5<=t||t<67.5),angle:t,speed:e.prevEvent.speed,velocity:{x:e.prevEvent.velocityX,y:e.prevEvent.velocityY}}}},{key:"preventDefault",value:function(){}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}}]),n}(_e);Object.defineProperties(jt.prototype,{pageX:{get:function(){return this.page.x},set:function(e){this.page.x=e}},pageY:{get:function(){return this.page.y},set:function(e){this.page.y=e}},clientX:{get:function(){return this.client.x},set:function(e){this.client.x=e}},clientY:{get:function(){return this.client.y},set:function(e){this.client.y=e}},dx:{get:function(){return this.delta.x},set:function(e){this.delta.x=e}},dy:{get:function(){return this.delta.y},set:function(e){this.delta.y=e}},velocityX:{get:function(){return this.velocity.x},set:function(e){this.velocity.x=e}},velocityY:{get:function(){return this.velocity.y},set:function(e){this.velocity.y=e}}});var It=s((function e(t,n,r,o,s){i(this,e),this.id=void 0,this.pointer=void 0,this.event=void 0,this.downTime=void 0,this.downTarget=void 0,this.id=t,this.pointer=n,this.event=r,this.downTime=o,this.downTarget=s})),Nt=function(e){return e.interactable="",e.element="",e.prepared="",e.pointerIsDown="",e.pointerWasMoved="",e._proxy="",e}({}),Lt=function(e){return e.start="",e.move="",e.end="",e.stop="",e.interacting="",e}({}),Bt=0,Ht=function(){function e(t){var n=this,r=t.pointerType,o=t.scopeFire;i(this,e),this.interactable=null,this.element=null,this.rect=null,this._rects=void 0,this.edges=null,this._scopeFire=void 0,this.prepared={name:null,axis:null,edges:null},this.pointerType=void 0,this.pointers=[],this.downEvent=null,this.downPointer={},this._latestPointer={pointer:null,event:null,eventTarget:null},this.prevEvent=null,this.pointerIsDown=!1,this.pointerWasMoved=!1,this._interacting=!1,this._ending=!1,this._stopped=!0,this._proxy=void 0,this.simulation=null,this.doMove=rt((function(e){this.move(e)}),"The interaction.doMove() method has been renamed to interaction.move()"),this.coords={start:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},prev:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},cur:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},delta:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},velocity:{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0}},this._id=Bt++,this._scopeFire=o,this.pointerType=r;var s=this;this._proxy={};var a=function(e){Object.defineProperty(n._proxy,e,{get:function(){return s[e]}})};for(var c in Nt)a(c);var u=function(e){Object.defineProperty(n._proxy,e,{value:function(){return s[e].apply(s,arguments)}})};for(var l in Lt)u(l);this._scopeFire("interactions:new",{interaction:this})}return s(e,[{key:"pointerMoveTolerance",get:function(){return 1}},{key:"pointerDown",value:function(e,t,n){var r=this.updatePointer(e,t,n,!0),i=this.pointers[r];this._scopeFire("interactions:down",{pointer:e,event:t,eventTarget:n,pointerIndex:r,pointerInfo:i,type:"down",interaction:this})}},{key:"start",value:function(e,t,n){return!(this.interacting()||!this.pointerIsDown||this.pointers.length<("gesture"===e.name?2:1)||!t.options[e.name].enabled)&&(it(this.prepared,e),this.interactable=t,this.element=n,this.rect=t.getRect(n),this.edges=this.prepared.edges?Q({},this.prepared.edges):{left:!0,right:!0,top:!0,bottom:!0},this._stopped=!1,this._interacting=this._doPhase({interaction:this,event:this.downEvent,phase:"start"})&&!this._stopped,this._interacting)}},{key:"pointerMove",value:function(e,t,n){this.simulation||this.modification&&this.modification.endResult||this.updatePointer(e,t,n,!1);var r,i,o=this.coords.cur.page.x===this.coords.prev.page.x&&this.coords.cur.page.y===this.coords.prev.page.y&&this.coords.cur.client.x===this.coords.prev.client.x&&this.coords.cur.client.y===this.coords.prev.client.y;this.pointerIsDown&&!this.pointerWasMoved&&(r=this.coords.cur.client.x-this.coords.start.client.x,i=this.coords.cur.client.y-this.coords.start.client.y,this.pointerWasMoved=ce(r,i)>this.pointerMoveTolerance);var s,a,c,u=this.getPointerIndex(e),l={pointer:e,pointerIndex:u,pointerInfo:this.pointers[u],event:t,type:"move",eventTarget:n,dx:r,dy:i,duplicate:o,interaction:this};o||(s=this.coords.velocity,a=this.coords.delta,c=Math.max(a.timeStamp/1e3,.001),s.page.x=a.page.x/c,s.page.y=a.page.y/c,s.client.x=a.client.x/c,s.client.y=a.client.y/c,s.timeStamp=c),this._scopeFire("interactions:move",l),o||this.simulation||(this.interacting()&&(l.type=null,this.move(l)),this.pointerWasMoved&&pe(this.coords.prev,this.coords.cur))}},{key:"move",value:function(e){e&&e.event||de(this.coords.delta),(e=Q({pointer:this._latestPointer.pointer,event:this._latestPointer.event,eventTarget:this._latestPointer.eventTarget,interaction:this},e||{})).phase="move",this._doPhase(e)}},{key:"pointerUp",value:function(e,t,n,r){var i=this.getPointerIndex(e);-1===i&&(i=this.updatePointer(e,t,n,!1));var o=/cancel$/i.test(t.type)?"cancel":"up";this._scopeFire("interactions:".concat(o),{pointer:e,pointerIndex:i,pointerInfo:this.pointers[i],event:t,eventTarget:n,type:o,curEventTarget:r,interaction:this}),this.simulation||this.end(t),this.removePointer(e,t)}},{key:"documentBlur",value:function(e){this.end(e),this._scopeFire("interactions:blur",{event:e,type:"blur",interaction:this})}},{key:"end",value:function(e){var t;this._ending=!0,e=e||this._latestPointer.event,this.interacting()&&(t=this._doPhase({event:e,interaction:this,phase:"end"})),this._ending=!1,!0===t&&this.stop()}},{key:"currentAction",value:function(){return this._interacting?this.prepared.name:null}},{key:"interacting",value:function(){return this._interacting}},{key:"stop",value:function(){this._scopeFire("interactions:stop",{interaction:this}),this.interactable=this.element=null,this._interacting=!1,this._stopped=!0,this.prepared.name=this.prevEvent=null}},{key:"getPointerIndex",value:function(e){var t=ge(e);return"mouse"===this.pointerType||"pen"===this.pointerType?this.pointers.length-1:ke(this.pointers,(function(e){return e.id===t}))}},{key:"getPointerInfo",value:function(e){return this.pointers[this.getPointerIndex(e)]}},{key:"updatePointer",value:function(e,t,n,r){var i,o,s,a=ge(e),c=this.getPointerIndex(e),u=this.pointers[c];return r=!1!==r&&(r||/(down|start)$/i.test(t.type)),u?u.pointer=e:(u=new It(a,e,t,null,null),c=this.pointers.length,this.pointers.push(u)),function(e,t,n){var r=t.length>1?ye(t):t[0];ve(r,e.page),function(e,t){t=t||{},H.isOperaMobile&&fe(e)?he("screen",e,t):he("client",e,t)}(r,e.client),e.timeStamp=n}(this.coords.cur,this.pointers.map((function(e){return e.pointer})),this._now()),i=this.coords.delta,o=this.coords.prev,s=this.coords.cur,i.page.x=s.page.x-o.page.x,i.page.y=s.page.y-o.page.y,i.client.x=s.client.x-o.client.x,i.client.y=s.client.y-o.client.y,i.timeStamp=s.timeStamp-o.timeStamp,r&&(this.pointerIsDown=!0,u.downTime=this.coords.cur.timeStamp,u.downTarget=n,le(this.downPointer,e),this.interacting()||(pe(this.coords.start,this.coords.cur),pe(this.coords.prev,this.coords.cur),this.downEvent=t,this.pointerWasMoved=!1)),this._updateLatestPointer(e,t,n),this._scopeFire("interactions:update-pointer",{pointer:e,event:t,eventTarget:n,down:r,pointerInfo:u,pointerIndex:c,interaction:this}),c}},{key:"removePointer",value:function(e,t){var n=this.getPointerIndex(e);if(-1!==n){var r=this.pointers[n];this._scopeFire("interactions:remove-pointer",{pointer:e,event:t,eventTarget:null,pointerIndex:n,pointerInfo:r,interaction:this}),this.pointers.splice(n,1),this.pointerIsDown=!1}}},{key:"_updateLatestPointer",value:function(e,t,n){this._latestPointer.pointer=e,this._latestPointer.event=t,this._latestPointer.eventTarget=n}},{key:"destroy",value:function(){this._latestPointer.pointer=null,this._latestPointer.event=null,this._latestPointer.eventTarget=null}},{key:"_createPreparedEvent",value:function(e,t,n,r){return new jt(this,e,this.prepared.name,t,this.element,n,r)}},{key:"_fireEvent",value:function(e){var t;null==(t=this.interactable)||t.fire(e),(!this.prevEvent||e.timeStamp>=this.prevEvent.timeStamp)&&(this.prevEvent=e)}},{key:"_doPhase",value:function(e){var t=e.event,n=e.phase,r=e.preEnd,i=e.type,o=this.rect;if(o&&"move"===n&&(ie(this.edges,o,this.coords.delta[this.interactable.options.deltaSource]),o.width=o.right-o.left,o.height=o.bottom-o.top),!1===this._scopeFire("interactions:before-action-".concat(n),e))return!1;var s=e.iEvent=this._createPreparedEvent(t,n,r,i);return this._scopeFire("interactions:action-".concat(n),e),"start"===n&&(this.prevEvent=s),this._fireEvent(s),this._scopeFire("interactions:after-action-".concat(n),e),!0}},{key:"_now",value:function(){return Date.now()}}]),e}();function qt(e){zt(e.interaction)}function zt(e){if(!function(e){return!(!e.offset.pending.x&&!e.offset.pending.y)}(e))return!1;var t=e.offset.pending;return Ut(e.coords.cur,t),Ut(e.coords.delta,t),ie(e.edges,e.rect,t),t.x=0,t.y=0,!0}function Wt(e){var t=e.x,n=e.y;this.offset.pending.x+=t,this.offset.pending.y+=n,this.offset.total.x+=t,this.offset.total.y+=n}function Ut(e,t){var n=e.page,r=e.client,i=t.x,o=t.y;n.x+=i,n.y+=o,r.x+=i,r.y+=o}Lt.offsetBy="";var Vt={id:"offset",before:["modifiers","pointer-events","actions","inertia"],install:function(e){e.Interaction.prototype.offsetBy=Wt},listeners:{"interactions:new":function(e){e.interaction.offset={total:{x:0,y:0},pending:{x:0,y:0}}},"interactions:update-pointer":function(e){return function(e){e.pointerIsDown&&(Ut(e.coords.cur,e.offset.total),e.offset.pending.x=0,e.offset.pending.y=0)}(e.interaction)},"interactions:before-action-start":qt,"interactions:before-action-move":qt,"interactions:before-action-end":function(e){var t=e.interaction;if(zt(t))return t.move({offset:!0}),t.end(),!1},"interactions:stop":function(e){var t=e.interaction;t.offset.total.x=0,t.offset.total.y=0,t.offset.pending.x=0,t.offset.pending.y=0}}},Yt=Vt,$t=function(){function e(t){i(this,e),this.active=!1,this.isModified=!1,this.smoothEnd=!1,this.allowResume=!1,this.modification=void 0,this.modifierCount=0,this.modifierArg=void 0,this.startCoords=void 0,this.t0=0,this.v0=0,this.te=0,this.targetOffset=void 0,this.modifiedOffset=void 0,this.currentOffset=void 0,this.lambda_v0=0,this.one_ve_v0=0,this.timeout=void 0,this.interaction=void 0,this.interaction=t}return s(e,[{key:"start",value:function(e){var t=this.interaction,n=Xt(t);if(!n||!n.enabled)return!1;var r=t.coords.velocity.client,i=ce(r.x,r.y),o=this.modification||(this.modification=new Ot(t));if(o.copyFrom(t.modification),this.t0=t._now(),this.allowResume=n.allowResume,this.v0=i,this.currentOffset={x:0,y:0},this.startCoords=t.coords.cur.page,this.modifierArg=o.fillArg({pageCoords:this.startCoords,preEnd:!0,phase:"inertiastart"}),this.t0-t.coords.cur.timeStamp<50&&i>n.minSpeed&&i>n.endSpeed)this.startInertia();else{if(o.result=o.setAll(this.modifierArg),!o.result.changed)return!1;this.startSmoothEnd()}return t.modification.result.rect=null,t.offsetBy(this.targetOffset),t._doPhase({interaction:t,event:e,phase:"inertiastart"}),t.offsetBy({x:-this.targetOffset.x,y:-this.targetOffset.y}),t.modification.result.rect=null,this.active=!0,t.simulation=this,!0}},{key:"startInertia",value:function(){var e=this,t=this.interaction.coords.velocity.client,n=Xt(this.interaction),r=n.resistance,i=-Math.log(n.endSpeed/this.v0)/r;this.targetOffset={x:(t.x-i)/r,y:(t.y-i)/r},this.te=i,this.lambda_v0=r/this.v0,this.one_ve_v0=1-n.endSpeed/this.v0;var o=this.modification,s=this.modifierArg;s.pageCoords={x:this.startCoords.x+this.targetOffset.x,y:this.startCoords.y+this.targetOffset.y},o.result=o.setAll(s),o.result.changed&&(this.isModified=!0,this.modifiedOffset={x:this.targetOffset.x+o.result.delta.x,y:this.targetOffset.y+o.result.delta.y}),this.onNextFrame((function(){return e.inertiaTick()}))}},{key:"startSmoothEnd",value:function(){var e=this;this.smoothEnd=!0,this.isModified=!0,this.targetOffset={x:this.modification.result.delta.x,y:this.modification.result.delta.y},this.onNextFrame((function(){return e.smoothEndTick()}))}},{key:"onNextFrame",value:function(e){var t=this;this.timeout=Ge((function(){t.active&&e()}))}},{key:"inertiaTick",value:function(){var e,t,n,r,i,o=this,s=this.interaction,a=Xt(s).resistance,c=(s._now()-this.t0)/1e3;if(c<this.te){var u,l=1-(Math.exp(-a*c)-this.lambda_v0)/this.one_ve_v0;this.isModified?(e=this.targetOffset.x,t=this.targetOffset.y,n=this.modifiedOffset.x,r=this.modifiedOffset.y,u={x:Kt(i=l,0,e,n),y:Kt(i,0,t,r)}):u={x:this.targetOffset.x*l,y:this.targetOffset.y*l};var p={x:u.x-this.currentOffset.x,y:u.y-this.currentOffset.y};this.currentOffset.x+=p.x,this.currentOffset.y+=p.y,s.offsetBy(p),s.move(),this.onNextFrame((function(){return o.inertiaTick()}))}else s.offsetBy({x:this.modifiedOffset.x-this.currentOffset.x,y:this.modifiedOffset.y-this.currentOffset.y}),this.end()}},{key:"smoothEndTick",value:function(){var e=this,t=this.interaction,n=t._now()-this.t0,r=Xt(t).smoothEndDuration;if(n<r){var i={x:Jt(n,0,this.targetOffset.x,r),y:Jt(n,0,this.targetOffset.y,r)},o={x:i.x-this.currentOffset.x,y:i.y-this.currentOffset.y};this.currentOffset.x+=o.x,this.currentOffset.y+=o.y,t.offsetBy(o),t.move({skipModifiers:this.modifierCount}),this.onNextFrame((function(){return e.smoothEndTick()}))}else t.offsetBy({x:this.targetOffset.x-this.currentOffset.x,y:this.targetOffset.y-this.currentOffset.y}),this.end()}},{key:"resume",value:function(e){var t=e.pointer,n=e.event,r=e.eventTarget,i=this.interaction;i.offsetBy({x:-this.currentOffset.x,y:-this.currentOffset.y}),i.updatePointer(t,n,r,!0),i._doPhase({interaction:i,event:n,phase:"resume"}),pe(i.coords.prev,i.coords.cur),this.stop()}},{key:"end",value:function(){this.interaction.move(),this.interaction.end(),this.stop()}},{key:"stop",value:function(){this.active=this.smoothEnd=!1,this.interaction.simulation=null,Ke(this.timeout)}}]),e}();function Xt(e){var t=e.interactable,n=e.prepared;return t&&t.options&&n.name&&t.options[n.name].inertia}var Gt={id:"inertia",before:["modifiers","actions"],install:function(e){var t=e.defaults;e.usePlugin(Yt),e.usePlugin(Rt),e.actions.phases.inertiastart=!0,e.actions.phases.resume=!0,t.perAction.inertia={enabled:!1,resistance:10,minSpeed:100,endSpeed:10,allowResume:!0,smoothEndDuration:300}},listeners:{"interactions:new":function(e){var t=e.interaction;t.inertia=new $t(t)},"interactions:before-action-end":function(e){var t=e.interaction,n=e.event;return(!t._interacting||t.simulation||!t.inertia.start(n))&&null},"interactions:down":function(e){var t=e.interaction,n=e.eventTarget,r=t.inertia;if(r.active)for(var i=n;P(i);){if(i===t.element){r.resume(e);break}i=W(i)}},"interactions:stop":function(e){var t=e.interaction.inertia;t.active&&t.stop()},"interactions:before-action-resume":function(e){var t=e.interaction.modification;t.stop(e),t.start(e,e.interaction.coords.cur.page),t.applyToInteraction(e)},"interactions:before-action-inertiastart":function(e){return e.interaction.modification.setAndApply(e)},"interactions:action-resume":Dt,"interactions:action-inertiastart":Dt,"interactions:after-action-inertiastart":function(e){return e.interaction.modification.restoreInteractionCoords(e)},"interactions:after-action-resume":function(e){return e.interaction.modification.restoreInteractionCoords(e)}}};function Kt(e,t,n,r){var i=1-e;return i*i*t+2*i*e*n+e*e*r}function Jt(e,t,n,r){return-n*(e/=r)*(e-2)+t}var Zt=Gt;function Qt(e,t){for(var n=0;n<t.length;n++){var r=t[n];if(e.immediatePropagationStopped)break;r(e)}}var en=function(){function e(t){i(this,e),this.options=void 0,this.types={},this.propagationStopped=!1,this.immediatePropagationStopped=!1,this.global=void 0,this.options=Q({},t||{})}return s(e,[{key:"fire",value:function(e){var t,n=this.global;(t=this.types[e.type])&&Qt(e,t),!e.propagationStopped&&n&&(t=n[e.type])&&Qt(e,t)}},{key:"on",value:function(e,t){var n=se(e,t);for(e in n)this.types[e]=Te(this.types[e]||[],n[e])}},{key:"off",value:function(e,t){var n=se(e,t);for(e in n){var r=this.types[e];if(r&&r.length)for(var i=0,o=n[e];i<o.length;i++){var s=o[i],a=r.indexOf(s);-1!==a&&r.splice(a,1)}}}},{key:"getRect",value:function(e){return null}}]),e}(),tn=function(){function e(t){i(this,e),this.currentTarget=void 0,this.originalEvent=void 0,this.type=void 0,this.originalEvent=t,le(this,t)}return s(e,[{key:"preventOriginalDefault",value:function(){this.originalEvent.preventDefault()}},{key:"stopPropagation",value:function(){this.originalEvent.stopPropagation()}},{key:"stopImmediatePropagation",value:function(){this.originalEvent.stopImmediatePropagation()}}]),e}();function nn(e){return _(e)?{capture:!!e.capture,passive:!!e.passive}:{capture:!!e,passive:!1}}function rn(e,t){return e===t||("boolean"==typeof e?!!t.capture===e&&0==!!t.passive:!!e.capture==!!t.capture&&!!e.passive==!!t.passive)}var on={id:"events",install:function(e){var t,n=[],r={},i=[],o={add:s,remove:a,addDelegate:function(e,t,n,o,a){var l=nn(a);if(!r[n]){r[n]=[];for(var p=0;p<i.length;p++){var d=i[p];s(d,n,c),s(d,n,u,!0)}}var f=r[n],h=Oe(f,(function(n){return n.selector===e&&n.context===t}));h||(h={selector:e,context:t,listeners:[]},f.push(h)),h.listeners.push({func:o,options:l})},removeDelegate:function(e,t,n,i,o){var s,l=nn(o),p=r[n],d=!1;if(p)for(s=p.length-1;s>=0;s--){var f=p[s];if(f.selector===e&&f.context===t){for(var h=f.listeners,v=h.length-1;v>=0;v--){var g=h[v];if(g.func===i&&rn(g.options,l)){h.splice(v,1),h.length||(p.splice(s,1),a(t,n,c),a(t,n,u,!0)),d=!0;break}}if(d)break}}},delegateListener:c,delegateUseCapture:u,delegatedEvents:r,documents:i,targets:n,supportsOptions:!1,supportsPassive:!1};function s(e,t,r,i){if(e.addEventListener){var s=nn(i),a=Oe(n,(function(t){return t.eventTarget===e}));a||(a={eventTarget:e,events:{}},n.push(a)),a.events[t]||(a.events[t]=[]),Oe(a.events[t],(function(e){return e.func===r&&rn(e.options,s)}))||(e.addEventListener(t,r,o.supportsOptions?s:s.capture),a.events[t].push({func:r,options:s}))}}function a(e,t,r,i){if(e.addEventListener&&e.removeEventListener){var s=ke(n,(function(t){return t.eventTarget===e})),c=n[s];if(c&&c.events)if("all"!==t){var u=!1,l=c.events[t];if(l){if("all"===r){for(var p=l.length-1;p>=0;p--){var d=l[p];a(e,t,d.func,d.options)}return}for(var f=nn(i),h=0;h<l.length;h++){var v=l[h];if(v.func===r&&rn(v.options,f)){e.removeEventListener(t,r,o.supportsOptions?f:f.capture),l.splice(h,1),0===l.length&&(delete c.events[t],u=!0);break}}}u&&!Object.keys(c.events).length&&n.splice(s,1)}else for(t in c.events)c.events.hasOwnProperty(t)&&a(e,t,"all")}}function c(e,t){for(var n=nn(t),i=new tn(e),o=r[e.type],s=Ee(e)[0],a=s;P(a);){for(var c=0;c<o.length;c++){var u=o[c],l=u.selector,p=u.context;if(U(a,l)&&q(p,s)&&q(p,a)){var d=u.listeners;i.currentTarget=a;for(var f=0;f<d.length;f++){var h=d[f];rn(h.options,n)&&h.func(i)}}}a=W(a)}}function u(e){return c(e,!0)}return null==(t=e.document)||t.createElement("div").addEventListener("test",null,{get capture(){return o.supportsOptions=!0},get passive(){return o.supportsPassive=!0}}),e.events=o,o}},sn={methodOrder:["simulationResume","mouseOrPen","hasPointer","idle"],search:function(e){for(var t=0,n=sn.methodOrder;t<n.length;t++){var r=n[t],i=sn[r](e);if(i)return i}return null},simulationResume:function(e){var t=e.pointerType,n=e.eventType,r=e.eventTarget,i=e.scope;if(!/down|start/i.test(n))return null;for(var o=0,s=i.interactions.list;o<s.length;o++){var a=s[o],c=r;if(a.simulation&&a.simulation.allowResume&&a.pointerType===t)for(;c;){if(c===a.element)return a;c=W(c)}}return null},mouseOrPen:function(e){var t,n=e.pointerId,r=e.pointerType,i=e.eventType,o=e.scope;if("mouse"!==r&&"pen"!==r)return null;for(var s=0,a=o.interactions.list;s<a.length;s++){var c=a[s];if(c.pointerType===r){if(c.simulation&&!an(c,n))continue;if(c.interacting())return c;t||(t=c)}}if(t)return t;for(var u=0,l=o.interactions.list;u<l.length;u++){var p=l[u];if(!(p.pointerType!==r||/down/i.test(i)&&p.simulation))return p}return null},hasPointer:function(e){for(var t=e.pointerId,n=0,r=e.scope.interactions.list;n<r.length;n++){var i=r[n];if(an(i,t))return i}return null},idle:function(e){for(var t=e.pointerType,n=0,r=e.scope.interactions.list;n<r.length;n++){var i=r[n];if(1===i.pointers.length){var o=i.interactable;if(o&&(!o.options.gesture||!o.options.gesture.enabled))continue}else if(i.pointers.length>=2)continue;if(!i.interacting()&&t===i.pointerType)return i}return null}};function an(e,t){return e.pointers.some((function(e){return e.id===t}))}var cn=sn,un=["pointerDown","pointerMove","pointerUp","updatePointer","removePointer","windowBlur"];function ln(e,t){return function(n){var r=t.interactions.list,i=Ce(n),o=Ee(n),s=o[0],a=o[1],c=[];if(/^touch/.test(n.type)){t.prevTouchTime=t.now();for(var u=0,l=n.changedTouches;u<l.length;u++){var p=l[u],d={pointer:p,pointerId:ge(p),pointerType:i,eventType:n.type,eventTarget:s,curEventTarget:a,scope:t},f=pn(d);c.push([d.pointer,d.eventTarget,d.curEventTarget,f])}}else{var h=!1;if(!H.supportsPointerEvent&&/mouse/.test(n.type)){for(var v=0;v<r.length&&!h;v++)h="mouse"!==r[v].pointerType&&r[v].pointerIsDown;h=h||t.now()-t.prevTouchTime<500||0===n.timeStamp}if(!h){var g={pointer:n,pointerId:ge(n),pointerType:i,eventType:n.type,curEventTarget:a,eventTarget:s,scope:t},m=pn(g);c.push([g.pointer,g.eventTarget,g.curEventTarget,m])}}for(var y=0;y<c.length;y++){var b=c[y],x=b[0],w=b[1],C=b[2];b[3][e](x,n,w,C)}}}function pn(e){var t=e.pointerType,n=e.scope,r={interaction:cn.search(e),searchDetails:e};return n.fire("interactions:find",r),r.interaction||n.interactions.new({pointerType:t})}function dn(e,t){var n=e.doc,r=e.scope,i=e.options,o=r.interactions.docEvents,s=r.events,a=s[t];for(var c in r.browser.isIOS&&!i.events&&(i.events={passive:!1}),s.delegatedEvents)a(n,c,s.delegateListener),a(n,c,s.delegateUseCapture,!0);for(var u=i&&i.events,l=0;l<o.length;l++){var p=o[l];a(n,p.type,p.listener,u)}}var fn={id:"core/interactions",install:function(e){for(var t={},n=0;n<un.length;n++){var r=un[n];t[r]=ln(r,e)}var o,a=H.pEventTypes;function u(){for(var t=0,n=e.interactions.list;t<n.length;t++){var r=n[t];if(r.pointerIsDown&&"touch"===r.pointerType&&!r._interacting)for(var i=function(){var t=s[o];e.documents.some((function(e){return q(e.doc,t.downTarget)}))||r.removePointer(t.pointer,t.event)},o=0,s=r.pointers;o<s.length;o++)i()}}(o=L.PointerEvent?[{type:a.down,listener:u},{type:a.down,listener:t.pointerDown},{type:a.move,listener:t.pointerMove},{type:a.up,listener:t.pointerUp},{type:a.cancel,listener:t.pointerUp}]:[{type:"mousedown",listener:t.pointerDown},{type:"mousemove",listener:t.pointerMove},{type:"mouseup",listener:t.pointerUp},{type:"touchstart",listener:u},{type:"touchstart",listener:t.pointerDown},{type:"touchmove",listener:t.pointerMove},{type:"touchend",listener:t.pointerUp},{type:"touchcancel",listener:t.pointerUp}]).push({type:"blur",listener:function(t){for(var n=0,r=e.interactions.list;n<r.length;n++)r[n].documentBlur(t)}}),e.prevTouchTime=0,e.Interaction=function(t){c(r,t);var n=d(r);function r(){return i(this,r),n.apply(this,arguments)}return s(r,[{key:"pointerMoveTolerance",get:function(){return e.interactions.pointerMoveTolerance},set:function(t){e.interactions.pointerMoveTolerance=t}},{key:"_now",value:function(){return e.now()}}]),r}(Ht),e.interactions={list:[],new:function(t){t.scopeFire=function(t,n){return e.fire(t,n)};var n=new e.Interaction(t);return e.interactions.list.push(n),n},listeners:t,docEvents:o,pointerMoveTolerance:1},e.usePlugin(Tt)},listeners:{"scope:add-document":function(e){return dn(e,"add")},"scope:remove-document":function(e){return dn(e,"remove")},"interactable:unset":function(e,t){for(var n=e.interactable,r=t.interactions.list.length-1;r>=0;r--){var i=t.interactions.list[r];i.interactable===n&&(i.stop(),t.fire("interactions:destroy",{interaction:i}),i.destroy(),t.interactions.list.length>2&&t.interactions.list.splice(r,1))}}},onDocSignal:dn,doOnInteractions:ln,methodNames:un},hn=fn,vn=function(e){return e[e.On=0]="On",e[e.Off=1]="Off",e}(vn||{}),gn=function(){function e(t,n,r,o){i(this,e),this.target=void 0,this.options=void 0,this._actions=void 0,this.events=new en,this._context=void 0,this._win=void 0,this._doc=void 0,this._scopeEvents=void 0,this._actions=n.actions,this.target=t,this._context=n.context||r,this._win=b(Z(t)?this._context:t),this._doc=this._win.document,this._scopeEvents=o,this.set(n)}return s(e,[{key:"_defaults",get:function(){return{base:{},perAction:{},actions:{}}}},{key:"setOnEvents",value:function(e,t){return T(t.onstart)&&this.on("".concat(e,"start"),t.onstart),T(t.onmove)&&this.on("".concat(e,"move"),t.onmove),T(t.onend)&&this.on("".concat(e,"end"),t.onend),T(t.oninertiastart)&&this.on("".concat(e,"inertiastart"),t.oninertiastart),this}},{key:"updatePerActionListeners",value:function(e,t,n){var r,i=this,o=null==(r=this._actions.map[e])?void 0:r.filterEventType,s=function(e){return(null==o||o(e))&&St(e,i._actions)};(D(t)||_(t))&&this._onOff(vn.Off,e,t,void 0,s),(D(n)||_(n))&&this._onOff(vn.On,e,n,void 0,s)}},{key:"setPerAction",value:function(e,t){var n=this._defaults;for(var r in t){var i=r,o=this.options[e],s=t[i];"listeners"===i&&this.updatePerActionListeners(e,o.listeners,s),D(s)?o[i]=Se(s):A(s)?(o[i]=Q(o[i]||{},kt(s)),_(n.perAction[i])&&"enabled"in n.perAction[i]&&(o[i].enabled=!1!==s.enabled)):k(s)&&_(n.perAction[i])?o[i].enabled=s:o[i]=s}}},{key:"getRect",value:function(e){return e=e||(P(this.target)?this.target:null),O(this.target)&&(e=e||this._context.querySelector(this.target)),K(e)}},{key:"rectChecker",value:function(e){var t=this;return T(e)?(this.getRect=function(n){var r=Q({},e.apply(t,n));return"width"in r||(r.width=r.right-r.left,r.height=r.bottom-r.top),r},this):null===e?(delete this.getRect,this):this.getRect}},{key:"_backCompatOption",value:function(e,t){if(Z(t)||_(t)){for(var n in this.options[e]=t,this._actions.map)this.options[n][e]=t;return this}return this.options[e]}},{key:"origin",value:function(e){return this._backCompatOption("origin",e)}},{key:"deltaSource",value:function(e){return"page"===e||"client"===e?(this.options.deltaSource=e,this):this.options.deltaSource}},{key:"getAllElements",value:function(){var e=this.target;return O(e)?Array.from(this._context.querySelectorAll(e)):T(e)&&e.getAllElements?e.getAllElements():P(e)?[e]:[]}},{key:"context",value:function(){return this._context}},{key:"inContext",value:function(e){return this._context===e.ownerDocument||q(this._context,e)}},{key:"testIgnoreAllow",value:function(e,t,n){return!this.testIgnore(e.ignoreFrom,t,n)&&this.testAllow(e.allowFrom,t,n)}},{key:"testAllow",value:function(e,t,n){return!e||!!P(n)&&(O(e)?$(n,e,t):!!P(e)&&q(e,n))}},{key:"testIgnore",value:function(e,t,n){return!(!e||!P(n))&&(O(e)?$(n,e,t):!!P(e)&&q(e,n))}},{key:"fire",value:function(e){return this.events.fire(e),this}},{key:"_onOff",value:function(e,t,n,r,i){_(t)&&!D(t)&&(r=n,n=null);var o=se(t,n,i);for(var s in o){"wheel"===s&&(s=H.wheelEvent);for(var a=0,c=o[s];a<c.length;a++){var u=c[a];St(s,this._actions)?this.events[e===vn.On?"on":"off"](s,u):O(this.target)?this._scopeEvents[e===vn.On?"addDelegate":"removeDelegate"](this.target,this._context,s,u,r):this._scopeEvents[e===vn.On?"add":"remove"](this.target,s,u,r)}}return this}},{key:"on",value:function(e,t,n){return this._onOff(vn.On,e,t,n)}},{key:"off",value:function(e,t,n){return this._onOff(vn.Off,e,t,n)}},{key:"set",value:function(e){var t=this._defaults;for(var n in _(e)||(e={}),this.options=kt(t.base),this._actions.methodDict){var r=n,i=this._actions.methodDict[r];this.options[r]={},this.setPerAction(r,Q(Q({},t.perAction),t.actions[r])),this[i](e[r])}for(var o in e)"getRect"!==o?T(this[o])&&this[o](e[o]):this.rectChecker(e.getRect);return this}},{key:"unset",value:function(){if(O(this.target))for(var e in this._scopeEvents.delegatedEvents)for(var t=this._scopeEvents.delegatedEvents[e],n=t.length-1;n>=0;n--){var r=t[n],i=r.selector,o=r.context,s=r.listeners;i===this.target&&o===this._context&&t.splice(n,1);for(var a=s.length-1;a>=0;a--)this._scopeEvents.removeDelegate(this.target,this._context,e,s[a][0],s[a][1])}else this._scopeEvents.remove(this.target,"all")}}]),e}(),mn=function(){function e(t){var n=this;i(this,e),this.list=[],this.selectorMap={},this.scope=void 0,this.scope=t,t.addListeners({"interactable:unset":function(e){var t=e.interactable,r=t.target,i=O(r)?n.selectorMap[r]:r[n.scope.id],o=ke(i,(function(e){return e===t}));i.splice(o,1)}})}return s(e,[{key:"new",value:function(e,t){t=Q(t||{},{actions:this.scope.actions});var n=new this.scope.Interactable(e,t,this.scope.document,this.scope.events);return this.scope.addDocument(n._doc),this.list.push(n),O(e)?(this.selectorMap[e]||(this.selectorMap[e]=[]),this.selectorMap[e].push(n)):(n.target[this.scope.id]||Object.defineProperty(e,this.scope.id,{value:[],configurable:!0}),e[this.scope.id].push(n)),this.scope.fire("interactable:new",{target:e,options:t,interactable:n,win:this.scope._win}),n}},{key:"getExisting",value:function(e,t){var n=t&&t.context||this.scope.document,r=O(e),i=r?this.selectorMap[e]:e[this.scope.id];if(i)return Oe(i,(function(t){return t._context===n&&(r||t.inContext(e))}))}},{key:"forEachMatch",value:function(e,t){for(var n=0,r=this.list;n<r.length;n++){var i=r[n],o=void 0;if((O(i.target)?P(e)&&U(e,i.target):e===i.target)&&i.inContext(e)&&(o=t(i)),void 0!==o)return o}}}]),e}(),yn=function(){function e(){var t=this;i(this,e),this.id="__interact_scope_".concat(Math.floor(100*Math.random())),this.isInitialized=!1,this.listenerMaps=[],this.browser=H,this.defaults=kt(Mt),this.Eventable=en,this.actions={map:{},phases:{start:!0,move:!0,end:!0},methodDict:{},phaselessTypes:{}},this.interactStatic=function(e){var t=function t(n,r){var i=e.interactables.getExisting(n,r);return i||((i=e.interactables.new(n,r)).events.global=t.globalEvents),i};return t.getPointerAverage=ye,t.getTouchBBox=be,t.getTouchDistance=xe,t.getTouchAngle=we,t.getElementRect=K,t.getElementClientRect=G,t.matchesSelector=U,t.closest=z,t.globalEvents={},t.version="1.10.27",t.scope=e,t.use=function(e,t){return this.scope.usePlugin(e,t),this},t.isSet=function(e,t){return!!this.scope.interactables.get(e,t&&t.context)},t.on=rt((function(e,t,n){if(O(e)&&-1!==e.search(" ")&&(e=e.trim().split(/ +/)),D(e)){for(var r=0,i=e;r<i.length;r++){var o=i[r];this.on(o,t,n)}return this}if(_(e)){for(var s in e)this.on(s,e[s],t);return this}return St(e,this.scope.actions)?this.globalEvents[e]?this.globalEvents[e].push(t):this.globalEvents[e]=[t]:this.scope.events.add(this.scope.document,e,t,{options:n}),this}),"The interact.on() method is being deprecated"),t.off=rt((function(e,t,n){if(O(e)&&-1!==e.search(" ")&&(e=e.trim().split(/ +/)),D(e)){for(var r=0,i=e;r<i.length;r++){var o=i[r];this.off(o,t,n)}return this}if(_(e)){for(var s in e)this.off(s,e[s],t);return this}var a;return St(e,this.scope.actions)?e in this.globalEvents&&-1!==(a=this.globalEvents[e].indexOf(t))&&this.globalEvents[e].splice(a,1):this.scope.events.remove(this.scope.document,e,t,n),this}),"The interact.off() method is being deprecated"),t.debug=function(){return this.scope},t.supportsTouch=function(){return H.supportsTouch},t.supportsPointerEvent=function(){return H.supportsPointerEvent},t.stop=function(){for(var e=0,t=this.scope.interactions.list;e<t.length;e++)t[e].stop();return this},t.pointerMoveTolerance=function(e){return S(e)?(this.scope.interactions.pointerMoveTolerance=e,this):this.scope.interactions.pointerMoveTolerance},t.addDocument=function(e,t){this.scope.addDocument(e,t)},t.removeDocument=function(e){this.scope.removeDocument(e)},t}(this),this.InteractEvent=jt,this.Interactable=void 0,this.interactables=new mn(this),this._win=void 0,this.document=void 0,this.window=void 0,this.documents=[],this._plugins={list:[],map:{}},this.onWindowUnload=function(e){return t.removeDocument(e.target)};var n=this;this.Interactable=function(e){c(r,e);var t=d(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"_defaults",get:function(){return n.defaults}},{key:"set",value:function(e){return f(u(r.prototype),"set",this).call(this,e),n.fire("interactable:set",{options:e,interactable:this}),this}},{key:"unset",value:function(){f(u(r.prototype),"unset",this).call(this);var e=n.interactables.list.indexOf(this);e<0||(n.interactables.list.splice(e,1),n.fire("interactable:unset",{interactable:this}))}}]),r}(gn)}return s(e,[{key:"addListeners",value:function(e,t){this.listenerMaps.push({id:t,map:e})}},{key:"fire",value:function(e,t){for(var n=0,r=this.listenerMaps;n<r.length;n++){var i=r[n].map[e];if(i&&!1===i(t,this,e))return!1}}},{key:"init",value:function(e){return this.isInitialized?this:function(e,t){return e.isInitialized=!0,C(t)&&y(t),L.init(t),H.init(t),Je(t),e.window=t,e.document=t.document,e.usePlugin(hn),e.usePlugin(on),e}(this,e)}},{key:"pluginIsInstalled",value:function(e){var t=e.id;return t?!!this._plugins.map[t]:-1!==this._plugins.list.indexOf(e)}},{key:"usePlugin",value:function(e,t){if(!this.isInitialized)return this;if(this.pluginIsInstalled(e))return this;if(e.id&&(this._plugins.map[e.id]=e),this._plugins.list.push(e),e.install&&e.install(this,t),e.listeners&&e.before){for(var n=0,r=this.listenerMaps.length,i=e.before.reduce((function(e,t){return e[t]=!0,e[bn(t)]=!0,e}),{});n<r;n++){var o=this.listenerMaps[n].id;if(o&&(i[o]||i[bn(o)]))break}this.listenerMaps.splice(n,0,{id:e.id,map:e.listeners})}else e.listeners&&this.listenerMaps.push({id:e.id,map:e.listeners});return this}},{key:"addDocument",value:function(e,t){if(-1!==this.getDocIndex(e))return!1;var n=b(e);t=t?Q({},t):{},this.documents.push({doc:e,options:t}),this.events.documents.push(e),e!==this.document&&this.events.add(n,"unload",this.onWindowUnload),this.fire("scope:add-document",{doc:e,window:n,scope:this,options:t})}},{key:"removeDocument",value:function(e){var t=this.getDocIndex(e),n=b(e),r=this.documents[t].options;this.events.remove(n,"unload",this.onWindowUnload),this.documents.splice(t,1),this.events.documents.splice(t,1),this.fire("scope:remove-document",{doc:e,window:n,scope:this,options:r})}},{key:"getDocIndex",value:function(e){for(var t=0;t<this.documents.length;t++)if(this.documents[t].doc===e)return t;return-1}},{key:"getDocOptions",value:function(e){var t=this.getDocIndex(e);return-1===t?null:this.documents[t].options}},{key:"now",value:function(){return(this.window.Date||Date).now()}}]),e}();function bn(e){return e&&e.replace(/\/.*$/,"")}var xn=new yn,wn=xn.interactStatic,Cn="undefined"!=typeof globalThis?globalThis:window;xn.init(Cn);var En=Object.freeze({__proto__:null,edgeTarget:function(){},elements:function(){},grid:function(e){var t=[["x","y"],["left","top"],["right","bottom"],["width","height"]].filter((function(t){var n=t[0],r=t[1];return n in e||r in e})),n=function(n,r){for(var i=e.range,o=e.limits,s=void 0===o?{left:-1/0,right:1/0,top:-1/0,bottom:1/0}:o,a=e.offset,c=void 0===a?{x:0,y:0}:a,u={range:i,grid:e,x:null,y:null},l=0;l<t.length;l++){var p=t[l],d=p[0],f=p[1],h=Math.round((n-c.x)/e[d]),v=Math.round((r-c.y)/e[f]);u[d]=Math.max(s.left,Math.min(s.right,h*e[d]+c.x)),u[f]=Math.max(s.top,Math.min(s.bottom,v*e[f]+c.y))}return u};return n.grid=e,n.coordFields=t,n}}),_n={id:"snappers",install:function(e){var t=e.interactStatic;t.snappers=Q(t.snappers||{},En),t.createSnapGrid=t.snappers.grid}},Tn=_n,Sn={start:function(e){var t=e.state,r=e.rect,i=e.edges,o=e.pageCoords,s=t.options,a=s.ratio,c=s.enabled,u=t.options,l=u.equalDelta,p=u.modifiers;"preserve"===a&&(a=r.width/r.height),t.startCoords=Q({},o),t.startRect=Q({},r),t.ratio=a,t.equalDelta=l;var d=t.linkedEdges={top:i.top||i.left&&!i.bottom,left:i.left||i.top&&!i.right,bottom:i.bottom||i.right&&!i.top,right:i.right||i.bottom&&!i.left};if(t.xIsPrimaryAxis=!(!i.left&&!i.right),t.equalDelta){var f=(d.left?1:-1)*(d.top?1:-1);t.edgeSign={x:f,y:f}}else t.edgeSign={x:d.left?-1:1,y:d.top?-1:1};if(!1!==c&&Q(i,d),null!=p&&p.length){var h=new Ot(e.interaction);h.copyFrom(e.interaction.modification),h.prepareStates(p),t.subModification=h,h.startAll(n({},e))}},set:function(e){var t=e.state,r=e.rect,i=e.coords,o=t.linkedEdges,s=Q({},i),a=t.equalDelta?kn:On;if(Q(e.edges,o),a(t,t.xIsPrimaryAxis,i,r),!t.subModification)return null;var c=Q({},r);ie(o,c,{x:i.x-s.x,y:i.y-s.y});var u=t.subModification.setAll(n(n({},e),{},{rect:c,edges:o,pageCoords:i,prevCoords:i,prevRect:c})),l=u.delta;return u.changed&&(a(t,Math.abs(l.x)>Math.abs(l.y),u.coords,u.rect),Q(i,u.coords)),u.eventProps},defaults:{ratio:"preserve",equalDelta:!1,modifiers:[],enabled:!1}};function kn(e,t,n){var r=e.startCoords,i=e.edgeSign;t?n.y=r.y+(n.x-r.x)*i.y:n.x=r.x+(n.y-r.y)*i.x}function On(e,t,n,r){var i=e.startRect,o=e.startCoords,s=e.ratio,a=e.edgeSign;if(t){var c=r.width/s;n.y=o.y+(c-i.height)*a.y}else{var u=r.height*s;n.x=o.x+(u-i.width)*a.x}}var Pn=At(Sn,"aspectRatio"),An=function(){};An._defaults={};var Dn=An;function Fn(e,t,n){return T(e)?te(e,t.interactable,t.element,[n.x,n.y,t]):te(e,t.interactable,t.element)}var Rn={start:function(e){var t=e.rect,n=e.startOffset,r=e.state,i=e.interaction,o=e.pageCoords,s=r.options,a=s.elementRect,c=Q({left:0,top:0,right:0,bottom:0},s.offset||{});if(t&&a){var u=Fn(s.restriction,i,o);if(u){var l=u.right-u.left-t.width,p=u.bottom-u.top-t.height;l<0&&(c.left+=l,c.right+=l),p<0&&(c.top+=p,c.bottom+=p)}c.left+=n.left-t.width*a.left,c.top+=n.top-t.height*a.top,c.right+=n.right-t.width*(1-a.right),c.bottom+=n.bottom-t.height*(1-a.bottom)}r.offset=c},set:function(e){var t=e.coords,n=e.interaction,r=e.state,i=r.options,o=r.offset,s=Fn(i.restriction,n,t);if(s){var a=function(e){return!e||"left"in e&&"top"in e||((e=Q({},e)).left=e.x||0,e.top=e.y||0,e.right=e.right||e.left+e.width,e.bottom=e.bottom||e.top+e.height),e}(s);t.x=Math.max(Math.min(a.right-o.right,t.x),a.left+o.left),t.y=Math.max(Math.min(a.bottom-o.bottom,t.y),a.top+o.top)}},defaults:{restriction:null,elementRect:null,offset:null,endOnly:!1,enabled:!1}},Mn=At(Rn,"restrict"),jn={top:1/0,left:1/0,bottom:-1/0,right:-1/0},In={top:-1/0,left:-1/0,bottom:1/0,right:1/0};function Nn(e,t){for(var n=0,r=["top","left","bottom","right"];n<r.length;n++){var i=r[n];i in e||(e[i]=t[i])}return e}var Ln={noInner:jn,noOuter:In,start:function(e){var t,n=e.interaction,r=e.startOffset,i=e.state,o=i.options;o&&(t=ne(Fn(o.offset,n,n.coords.start.page))),t=t||{x:0,y:0},i.offset={top:t.y+r.top,left:t.x+r.left,bottom:t.y-r.bottom,right:t.x-r.right}},set:function(e){var t=e.coords,n=e.edges,r=e.interaction,i=e.state,o=i.offset,s=i.options;if(n){var a=Q({},t),c=Fn(s.inner,r,a)||{},u=Fn(s.outer,r,a)||{};Nn(c,jn),Nn(u,In),n.top?t.y=Math.min(Math.max(u.top+o.top,a.y),c.top+o.top):n.bottom&&(t.y=Math.max(Math.min(u.bottom+o.bottom,a.y),c.bottom+o.bottom)),n.left?t.x=Math.min(Math.max(u.left+o.left,a.x),c.left+o.left):n.right&&(t.x=Math.max(Math.min(u.right+o.right,a.x),c.right+o.right))}},defaults:{inner:null,outer:null,offset:null,endOnly:!1,enabled:!1}},Bn=At(Ln,"restrictEdges"),Hn=Q({get elementRect(){return{top:0,left:0,bottom:1,right:1}},set elementRect(e){}},Rn.defaults),qn=At({start:Rn.start,set:Rn.set,defaults:Hn},"restrictRect"),zn={width:-1/0,height:-1/0},Wn={width:1/0,height:1/0},Un=At({start:function(e){return Ln.start(e)},set:function(e){var t=e.interaction,n=e.state,r=e.rect,i=e.edges,o=n.options;if(i){var s=re(Fn(o.min,t,e.coords))||zn,a=re(Fn(o.max,t,e.coords))||Wn;n.options={endOnly:o.endOnly,inner:Q({},Ln.noInner),outer:Q({},Ln.noOuter)},i.top?(n.options.inner.top=r.bottom-s.height,n.options.outer.top=r.bottom-a.height):i.bottom&&(n.options.inner.bottom=r.top+s.height,n.options.outer.bottom=r.top+a.height),i.left?(n.options.inner.left=r.right-s.width,n.options.outer.left=r.right-a.width):i.right&&(n.options.inner.right=r.left+s.width,n.options.outer.right=r.left+a.width),Ln.set(e),n.options=o}},defaults:{min:null,max:null,endOnly:!1,enabled:!1}},"restrictSize"),Vn={start:function(e){var t,n=e.interaction,r=e.interactable,i=e.element,o=e.rect,s=e.state,a=e.startOffset,c=s.options,u=c.offsetWithOrigin?function(e){var t=e.interaction.element;return ne(te(e.state.options.origin,null,null,[t]))||oe(e.interactable,t,e.interaction.prepared.name)}(e):{x:0,y:0};if("startCoords"===c.offset)t={x:n.coords.start.page.x,y:n.coords.start.page.y};else{var l=te(c.offset,r,i,[n]);(t=ne(l)||{x:0,y:0}).x+=u.x,t.y+=u.y}var p=c.relativePoints;s.offsets=o&&p&&p.length?p.map((function(e,n){return{index:n,relativePoint:e,x:a.left-o.width*e.x+t.x,y:a.top-o.height*e.y+t.y}})):[{index:0,relativePoint:null,x:t.x,y:t.y}]},set:function(e){var t=e.interaction,n=e.coords,r=e.state,i=r.options,o=r.offsets,s=oe(t.interactable,t.element,t.prepared.name),a=Q({},n),c=[];i.offsetWithOrigin||(a.x-=s.x,a.y-=s.y);for(var u=0,l=o;u<l.length;u++)for(var p=l[u],d=a.x-p.x,f=a.y-p.y,h=0,v=i.targets.length;h<v;h++){var g,m=i.targets[h];(g=T(m)?m(d,f,t._proxy,p,h):m)&&c.push({x:(S(g.x)?g.x:d)+p.x,y:(S(g.y)?g.y:f)+p.y,range:S(g.range)?g.range:i.range,source:m,index:h,offset:p})}for(var y={target:null,inRange:!1,distance:0,range:0,delta:{x:0,y:0}},b=0;b<c.length;b++){var x=c[b],w=x.range,C=x.x-a.x,E=x.y-a.y,_=ce(C,E),k=_<=w;w===1/0&&y.inRange&&y.range!==1/0&&(k=!1),y.target&&!(k?y.inRange&&w!==1/0?_/w<y.distance/y.range:w===1/0&&y.range!==1/0||_<y.distance:!y.inRange&&_<y.distance)||(y.target=x,y.distance=_,y.range=w,y.inRange=k,y.delta.x=C,y.delta.y=E)}return y.inRange&&(n.x=y.target.x,n.y=y.target.y),r.closest=y,y},defaults:{range:1/0,targets:null,offset:null,offsetWithOrigin:!0,origin:null,relativePoints:null,endOnly:!1,enabled:!1}},Yn=At(Vn,"snap"),$n={start:function(e){var t=e.state,n=e.edges,r=t.options;if(!n)return null;e.state={options:{targets:null,relativePoints:[{x:n.left?0:1,y:n.top?0:1}],offset:r.offset||"self",origin:{x:0,y:0},range:r.range}},t.targetFields=t.targetFields||[["width","height"],["x","y"]],Vn.start(e),t.offsets=e.state.offsets,e.state=t},set:function(e){var t=e.interaction,n=e.state,r=e.coords,i=n.options,o=n.offsets,s={x:r.x-o[0].x,y:r.y-o[0].y};n.options=Q({},i),n.options.targets=[];for(var a=0,c=i.targets||[];a<c.length;a++){var u=c[a],l=void 0;if(l=T(u)?u(s.x,s.y,t):u){for(var p=0,d=n.targetFields;p<d.length;p++){var f=d[p],h=f[0],v=f[1];if(h in l||v in l){l.x=l[h],l.y=l[v];break}}n.options.targets.push(l)}}var g=Vn.set(e);return n.options=i,g},defaults:{range:1/0,targets:null,offset:null,endOnly:!1,enabled:!1}},Xn=At($n,"snapSize"),Gn={aspectRatio:Pn,restrictEdges:Bn,restrict:Mn,restrictRect:qn,restrictSize:Un,snapEdges:At({start:function(e){var t=e.edges;return t?(e.state.targetFields=e.state.targetFields||[[t.left?"left":"right",t.top?"top":"bottom"]],$n.start(e)):null},set:$n.set,defaults:Q(kt($n.defaults),{targets:void 0,range:void 0,offset:{x:0,y:0}})},"snapEdges"),snap:Yn,snapSize:Xn,spring:Dn,avoid:Dn,transform:Dn,rubberband:Dn},Kn={id:"modifiers",install:function(e){var t=e.interactStatic;for(var n in e.usePlugin(Rt),e.usePlugin(Tn),t.modifiers=Gn,Gn){var r=Gn[n],i=r._defaults,o=r._methods;i._methods=o,e.defaults.perAction[n]=i}}},Jn=Kn,Zn=function(e){c(n,e);var t=d(n);function n(e,r,o,s,a,c){var u;if(i(this,n),le(p(u=t.call(this,a)),o),o!==r&&le(p(u),r),u.timeStamp=c,u.originalEvent=o,u.type=e,u.pointerId=ge(r),u.pointerType=Ce(r),u.target=s,u.currentTarget=null,"tap"===e){var l=a.getPointerIndex(r);u.dt=u.timeStamp-a.pointers[l].downTime;var d=u.timeStamp-a.tapTime;u.double=!!a.prevTap&&"doubletap"!==a.prevTap.type&&a.prevTap.target===u.target&&d<500}else"doubletap"===e&&(u.dt=r.timeStamp-a.tapTime,u.double=!0);return u}return s(n,[{key:"_subtractOrigin",value:function(e){var t=e.x,n=e.y;return this.pageX-=t,this.pageY-=n,this.clientX-=t,this.clientY-=n,this}},{key:"_addOrigin",value:function(e){var t=e.x,n=e.y;return this.pageX+=t,this.pageY+=n,this.clientX+=t,this.clientY+=n,this}},{key:"preventDefault",value:function(){this.originalEvent.preventDefault()}}]),n}(_e),Qn={id:"pointer-events/base",before:["inertia","modifiers","auto-start","actions"],install:function(e){e.pointerEvents=Qn,e.defaults.actions.pointerEvents=Qn.defaults,Q(e.actions.phaselessTypes,Qn.types)},listeners:{"interactions:new":function(e){var t=e.interaction;t.prevTap=null,t.tapTime=0},"interactions:update-pointer":function(e){var t=e.down,n=e.pointerInfo;!t&&n.hold||(n.hold={duration:1/0,timeout:null})},"interactions:move":function(e,t){var n=e.interaction,r=e.pointer,i=e.event,o=e.eventTarget;e.duplicate||n.pointerIsDown&&!n.pointerWasMoved||(n.pointerIsDown&&nr(e),er({interaction:n,pointer:r,event:i,eventTarget:o,type:"move"},t))},"interactions:down":function(e,t){!function(e,t){for(var n=e.interaction,r=e.pointer,i=e.event,o=e.eventTarget,s=e.pointerIndex,a=n.pointers[s].hold,c=J(o),u={interaction:n,pointer:r,event:i,eventTarget:o,type:"hold",targets:[],path:c,node:null},l=0;l<c.length;l++){var p=c[l];u.node=p,t.fire("pointerEvents:collect-targets",u)}if(u.targets.length){for(var d=1/0,f=0,h=u.targets;f<h.length;f++){var v=h[f].eventable.options.holdDuration;v<d&&(d=v)}a.duration=d,a.timeout=setTimeout((function(){er({interaction:n,eventTarget:o,pointer:r,event:i,type:"hold"},t)}),d)}}(e,t),er(e,t)},"interactions:up":function(e,t){nr(e),er(e,t),function(e,t){var n=e.interaction,r=e.pointer,i=e.event,o=e.eventTarget;n.pointerWasMoved||er({interaction:n,eventTarget:o,pointer:r,event:i,type:"tap"},t)}(e,t)},"interactions:cancel":function(e,t){nr(e),er(e,t)}},PointerEvent:Zn,fire:er,collectEventTargets:tr,defaults:{holdDuration:600,ignoreFrom:null,allowFrom:null,origin:{x:0,y:0}},types:{down:!0,move:!0,up:!0,cancel:!0,tap:!0,doubletap:!0,hold:!0}};function er(e,t){var n=e.interaction,r=e.pointer,i=e.event,o=e.eventTarget,s=e.type,a=e.targets,c=void 0===a?tr(e,t):a,u=new Zn(s,r,i,o,n,t.now());t.fire("pointerEvents:new",{pointerEvent:u});for(var l={interaction:n,pointer:r,event:i,eventTarget:o,targets:c,type:s,pointerEvent:u},p=0;p<c.length;p++){var d=c[p];for(var f in d.props||{})u[f]=d.props[f];var h=oe(d.eventable,d.node);if(u._subtractOrigin(h),u.eventable=d.eventable,u.currentTarget=d.node,d.eventable.fire(u),u._addOrigin(h),u.immediatePropagationStopped||u.propagationStopped&&p+1<c.length&&c[p+1].node!==u.currentTarget)break}if(t.fire("pointerEvents:fired",l),"tap"===s){var v=u.double?er({interaction:n,pointer:r,event:i,eventTarget:o,type:"doubletap"},t):u;n.prevTap=v,n.tapTime=v.timeStamp}return u}function tr(e,t){var n=e.interaction,r=e.pointer,i=e.event,o=e.eventTarget,s=e.type,a=n.getPointerIndex(r),c=n.pointers[a];if("tap"===s&&(n.pointerWasMoved||!c||c.downTarget!==o))return[];for(var u=J(o),l={interaction:n,pointer:r,event:i,eventTarget:o,type:s,path:u,targets:[],node:null},p=0;p<u.length;p++){var d=u[p];l.node=d,t.fire("pointerEvents:collect-targets",l)}return"hold"===s&&(l.targets=l.targets.filter((function(e){var t,r;return e.eventable.options.holdDuration===(null==(t=n.pointers[a])||null==(r=t.hold)?void 0:r.duration)}))),l.targets}function nr(e){var t=e.interaction,n=e.pointerIndex,r=t.pointers[n].hold;r&&r.timeout&&(clearTimeout(r.timeout),r.timeout=null)}var rr=Object.freeze({__proto__:null,default:Qn});function ir(e){var t=e.interaction;t.holdIntervalHandle&&(clearInterval(t.holdIntervalHandle),t.holdIntervalHandle=null)}var or={id:"pointer-events/holdRepeat",install:function(e){e.usePlugin(Qn);var t=e.pointerEvents;t.defaults.holdRepeatInterval=0,t.types.holdrepeat=e.actions.phaselessTypes.holdrepeat=!0},listeners:["move","up","cancel","endall"].reduce((function(e,t){return e["pointerEvents:".concat(t)]=ir,e}),{"pointerEvents:new":function(e){var t=e.pointerEvent;"hold"===t.type&&(t.count=(t.count||0)+1)},"pointerEvents:fired":function(e,t){var n=e.interaction,r=e.pointerEvent,i=e.eventTarget,o=e.targets;if("hold"===r.type&&o.length){var s=o[0].eventable.options.holdRepeatInterval;s<=0||(n.holdIntervalHandle=setTimeout((function(){t.pointerEvents.fire({interaction:n,eventTarget:i,type:"hold",pointer:r,event:r},t)}),s))}}})},sr=or,ar={id:"pointer-events/interactableTargets",install:function(e){var t=e.Interactable;t.prototype.pointerEvents=function(e){return Q(this.events.options,e),this};var n=t.prototype._backCompatOption;t.prototype._backCompatOption=function(e,t){var r=n.call(this,e,t);return r===this&&(this.events.options[e]=t),r}},listeners:{"pointerEvents:collect-targets":function(e,t){var n=e.targets,r=e.node,i=e.type,o=e.eventTarget;t.interactables.forEachMatch(r,(function(e){var t=e.events,s=t.options;t.types[i]&&t.types[i].length&&e.testIgnoreAllow(s,r,o)&&n.push({node:r,eventable:t,props:{interactable:e}})}))},"interactable:new":function(e){var t=e.interactable;t.events.getRect=function(e){return t.getRect(e)}},"interactable:set":function(e,t){var n=e.interactable,r=e.options;Q(n.events.options,t.pointerEvents.defaults),Q(n.events.options,r.pointerEvents||{})}}},cr=ar,ur={id:"pointer-events",install:function(e){e.usePlugin(rr),e.usePlugin(sr),e.usePlugin(cr)}},lr=ur,pr={id:"reflow",install:function(e){var t=e.Interactable;e.actions.phases.reflow=!0,t.prototype.reflow=function(t){return function(e,t,n){for(var r=e.getAllElements(),i=n.window.Promise,o=i?[]:null,s=function(){var s=r[a],c=e.getRect(s);if(!c)return 1;var u,l=Oe(n.interactions.list,(function(n){return n.interacting()&&n.interactable===e&&n.element===s&&n.prepared.name===t.name}));if(l)l.move(),o&&(u=l._reflowPromise||new i((function(e){l._reflowResolve=e})));else{var p=re(c),d=function(e){return{coords:e,get page(){return this.coords.page},get client(){return this.coords.client},get timeStamp(){return this.coords.timeStamp},get pageX(){return this.coords.page.x},get pageY(){return this.coords.page.y},get clientX(){return this.coords.client.x},get clientY(){return this.coords.client.y},get pointerId(){return this.coords.pointerId},get target(){return this.coords.target},get type(){return this.coords.type},get pointerType(){return this.coords.pointerType},get buttons(){return this.coords.buttons},preventDefault:function(){}}}({page:{x:p.x,y:p.y},client:{x:p.x,y:p.y},timeStamp:n.now()});u=function(e,t,n,r,i){var o=e.interactions.new({pointerType:"reflow"}),s={interaction:o,event:i,pointer:i,eventTarget:n,phase:"reflow"};o.interactable=t,o.element=n,o.prevEvent=i,o.updatePointer(i,i,n,!0),de(o.coords.delta),it(o.prepared,r),o._doPhase(s);var a=e.window.Promise,c=a?new a((function(e){o._reflowResolve=e})):void 0;return o._reflowPromise=c,o.start(r,t,n),o._interacting?(o.move(s),o.end(i)):(o.stop(),o._reflowResolve()),o.removePointer(i,i),c}(n,e,s,t,d)}o&&o.push(u)},a=0;a<r.length&&!s();a++);return o&&i.all(o).then((function(){return e}))}(this,t,e)}},listeners:{"interactions:stop":function(e,t){var n=e.interaction;"reflow"===n.pointerType&&(n._reflowResolve&&n._reflowResolve(),function(e,t){e.splice(e.indexOf(t),1)}(t.interactions.list,n))}}},dr=pr;if(wn.use(Tt),wn.use(Yt),wn.use(lr),wn.use(Zt),wn.use(Jn),wn.use(Ct),wn.use($e),wn.use(nt),wn.use(dr),wn.default=wn,"object"===r(e)&&e)try{e.exports=wn}catch(t){}return wn.default=wn,wn}()},4692:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var o=[],s=Object.getPrototypeOf,a=o.slice,c=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},u=o.push,l=o.indexOf,p={},d=p.toString,f=p.hasOwnProperty,h=f.toString,v=h.call(Object),g={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=r.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,i,o=(n=n||b).createElement("script");if(o.text=e,t)for(r in x)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[d.call(e)]||"object":typeof e}var E="3.7.1",_=/HTML$/i,T=function(e,t){return new T.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,n=C(e);return!m(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}T.fn=T.prototype={jquery:E,constructor:T,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(T.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||m(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(u&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(n=s[t],o=i&&!Array.isArray(n)?[]:i||T.isPlainObject(n)?n:{},i=!1,s[t]=T.extend(u,o,r)):void 0!==r&&(s[t]=r));return s},T.extend({expando:"jQuery"+(E+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e)||(t=s(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||h.call(n)!==v))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(S(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},text:function(e){var t,n="",r=0,i=e.nodeType;if(!i)for(;t=e[r++];)n+=T.text(t);return 1===i||11===i?e.textContent:9===i?e.documentElement.textContent:3===i||4===i?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?T.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!_.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(S(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return c(s)},guid:1,support:g}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){p["[object "+t+"]"]=t.toLowerCase()}));var O=o.pop,P=o.sort,A=o.splice,D="[\\x20\\t\\r\\n\\f]",F=new RegExp("^"+D+"+|((?:^|[^\\\\])(?:\\\\.)*)"+D+"+$","g");T.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var R=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function M(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}T.escapeSelector=function(e){return(e+"").replace(R,M)};var j=b,I=u;!function(){var e,t,n,i,s,c,u,p,d,h,v=I,m=T.expando,y=0,b=0,x=ee(),w=ee(),C=ee(),E=ee(),_=function(e,t){return e===t&&(s=!0),0},S="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="(?:\\\\[\\da-fA-F]{1,6}"+D+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\["+D+"*("+R+")(?:"+D+"*([*^$|!~]?=)"+D+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+D+"*\\]",N=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",L=new RegExp(D+"+","g"),B=new RegExp("^"+D+"*,"+D+"*"),H=new RegExp("^"+D+"*([>+~]|"+D+")"+D+"*"),q=new RegExp(D+"|>"),z=new RegExp(N),W=new RegExp("^"+R+"$"),U={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+D+"*(even|odd|(([+-]|)(\\d*)n|)"+D+"*(?:([+-]|)"+D+"*(\\d+)|))"+D+"*\\)|)","i"),bool:new RegExp("^(?:"+S+")$","i"),needsContext:new RegExp("^"+D+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+D+"*((?:-\\d)?\\d*)"+D+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,X=/[+~]/,G=new RegExp("\\\\[\\da-fA-F]{1,6}"+D+"?|\\\\([^\\r\\n\\f])","g"),K=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},J=function(){ce()},Z=de((function(e){return!0===e.disabled&&k(e,"fieldset")}),{dir:"parentNode",next:"legend"});try{v.apply(o=a.call(j.childNodes),j.childNodes),o[j.childNodes.length].nodeType}catch(e){v={apply:function(e,t){I.apply(e,a.call(t))},call:function(e){I.apply(e,a.call(arguments,1))}}}function Q(e,t,n,r){var i,o,s,a,u,l,f,h=t&&t.ownerDocument,y=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==y&&9!==y&&11!==y)return n;if(!r&&(ce(t),t=t||c,p)){if(11!==y&&(u=$.exec(e)))if(i=u[1]){if(9===y){if(!(s=t.getElementById(i)))return n;if(s.id===i)return v.call(n,s),n}else if(h&&(s=h.getElementById(i))&&Q.contains(t,s)&&s.id===i)return v.call(n,s),n}else{if(u[2])return v.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&t.getElementsByClassName)return v.apply(n,t.getElementsByClassName(i)),n}if(!(E[e+" "]||d&&d.test(e))){if(f=e,h=t,1===y&&(q.test(e)||H.test(e))){for((h=X.test(e)&&ae(t.parentNode)||t)==t&&g.scope||((a=t.getAttribute("id"))?a=T.escapeSelector(a):t.setAttribute("id",a=m)),o=(l=le(e)).length;o--;)l[o]=(a?"#"+a:":scope")+" "+pe(l[o]);f=l.join(",")}try{return v.apply(n,h.querySelectorAll(f)),n}catch(t){E(e,!0)}finally{a===m&&t.removeAttribute("id")}}}return ye(e.replace(F,"$1"),t,n,r)}function ee(){var e=[];return function n(r,i){return e.push(r+" ")>t.cacheLength&&delete n[e.shift()],n[r+" "]=i}}function te(e){return e[m]=!0,e}function ne(e){var t=c.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function re(e){return function(t){return k(t,"input")&&t.type===e}}function ie(e){return function(t){return(k(t,"input")||k(t,"button"))&&t.type===e}}function oe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Z(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function se(e){return te((function(t){return t=+t,te((function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))}))}))}function ae(e){return e&&void 0!==e.getElementsByTagName&&e}function ce(e){var n,r=e?e.ownerDocument||e:j;return r!=c&&9===r.nodeType&&r.documentElement?(u=(c=r).documentElement,p=!T.isXMLDoc(c),h=u.matches||u.webkitMatchesSelector||u.msMatchesSelector,u.msMatchesSelector&&j!=c&&(n=c.defaultView)&&n.top!==n&&n.addEventListener("unload",J),g.getById=ne((function(e){return u.appendChild(e).id=T.expando,!c.getElementsByName||!c.getElementsByName(T.expando).length})),g.disconnectedMatch=ne((function(e){return h.call(e,"*")})),g.scope=ne((function(){return c.querySelectorAll(":scope")})),g.cssHas=ne((function(){try{return c.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),g.getById?(t.filter.ID=function(e){var t=e.replace(G,K);return function(e){return e.getAttribute("id")===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n=t.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var t=e.replace(G,K);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),t.find.TAG=function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},t.find.CLASS=function(e,t){if(void 0!==t.getElementsByClassName&&p)return t.getElementsByClassName(e)},d=[],ne((function(e){var t;u.appendChild(e).innerHTML="<a id='"+m+"' href='' disabled='disabled'></a><select id='"+m+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||d.push("\\["+D+"*(?:value|"+S+")"),e.querySelectorAll("[id~="+m+"-]").length||d.push("~="),e.querySelectorAll("a#"+m+"+*").length||d.push(".#.+[+~]"),e.querySelectorAll(":checked").length||d.push(":checked"),(t=c.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),u.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&d.push(":enabled",":disabled"),(t=c.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||d.push("\\["+D+"*name"+D+"*="+D+"*(?:''|\"\")")})),g.cssHas||d.push(":has"),d=d.length&&new RegExp(d.join("|")),_=function(e,t){if(e===t)return s=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!g.sortDetached&&t.compareDocumentPosition(e)===n?e===c||e.ownerDocument==j&&Q.contains(j,e)?-1:t===c||t.ownerDocument==j&&Q.contains(j,t)?1:i?l.call(i,e)-l.call(i,t):0:4&n?-1:1)},c):c}for(e in Q.matches=function(e,t){return Q(e,null,null,t)},Q.matchesSelector=function(e,t){if(ce(e),p&&!E[t+" "]&&(!d||!d.test(t)))try{var n=h.call(e,t);if(n||g.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){E(t,!0)}return Q(t,c,null,[e]).length>0},Q.contains=function(e,t){return(e.ownerDocument||e)!=c&&ce(e),T.contains(e,t)},Q.attr=function(e,n){(e.ownerDocument||e)!=c&&ce(e);var r=t.attrHandle[n.toLowerCase()],i=r&&f.call(t.attrHandle,n.toLowerCase())?r(e,n,!p):void 0;return void 0!==i?i:e.getAttribute(n)},Q.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},T.uniqueSort=function(e){var t,n=[],r=0,o=0;if(s=!g.sortStable,i=!g.sortStable&&a.call(e,0),P.call(e,_),s){for(;t=e[o++];)t===e[o]&&(r=n.push(o));for(;r--;)A.call(e,n[r],1)}return i=null,e},T.fn.uniqueSort=function(){return this.pushStack(T.uniqueSort(a.apply(this)))},t=T.expr={cacheLength:50,createPseudo:te,match:U,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(G,K),e[3]=(e[3]||e[4]||e[5]||"").replace(G,K),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||Q.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&Q.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return U.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=le(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(G,K).toLowerCase();return"*"===e?function(){return!0}:function(e){return k(e,t)}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+D+")"+e+"("+D+"|$)"))&&x(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=Q.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(L," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,c){var u,l,p,d,f,h=o!==s?"nextSibling":"previousSibling",v=t.parentNode,g=a&&t.nodeName.toLowerCase(),b=!c&&!a,x=!1;if(v){if(o){for(;h;){for(p=t;p=p[h];)if(a?k(p,g):1===p.nodeType)return!1;f=h="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?v.firstChild:v.lastChild],s&&b){for(x=(d=(u=(l=v[m]||(v[m]={}))[e]||[])[0]===y&&u[1])&&u[2],p=d&&v.childNodes[d];p=++d&&p&&p[h]||(x=d=0)||f.pop();)if(1===p.nodeType&&++x&&p===t){l[e]=[y,d,x];break}}else if(b&&(x=d=(u=(l=t[m]||(t[m]={}))[e]||[])[0]===y&&u[1]),!1===x)for(;(p=++d&&p&&p[h]||(x=d=0)||f.pop())&&(!(a?k(p,g):1===p.nodeType)||!++x||(b&&((l=p[m]||(p[m]={}))[e]=[y,x]),p!==t)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(e,n){var r,i=t.pseudos[e]||t.setFilters[e.toLowerCase()]||Q.error("unsupported pseudo: "+e);return i[m]?i(n):i.length>1?(r=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?te((function(e,t){for(var r,o=i(e,n),s=o.length;s--;)e[r=l.call(e,o[s])]=!(t[r]=o[s])})):function(e){return i(e,0,r)}):i}},pseudos:{not:te((function(e){var t=[],n=[],r=me(e.replace(F,"$1"));return r[m]?te((function(e,t,n,i){for(var o,s=r(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:te((function(e){return function(t){return Q(e,t).length>0}})),contains:te((function(e){return e=e.replace(G,K),function(t){return(t.textContent||T.text(t)).indexOf(e)>-1}})),lang:te((function(e){return W.test(e||"")||Q.error("unsupported lang: "+e),e=e.replace(G,K).toLowerCase(),function(t){var n;do{if(n=p?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(e){var t=r.location&&r.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===u},focus:function(e){return e===function(){try{return c.activeElement}catch(e){}}()&&c.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:oe(!1),disabled:oe(!0),checked:function(e){return k(e,"input")&&!!e.checked||k(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){return k(e,"input")&&"button"===e.type||k(e,"button")},text:function(e){var t;return k(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:se((function(){return[0]})),last:se((function(e,t){return[t-1]})),eq:se((function(e,t,n){return[n<0?n+t:n]})),even:se((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:se((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:se((function(e,t,n){var r;for(r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:se((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[e]=re(e);for(e in{submit:!0,reset:!0})t.pseudos[e]=ie(e);function ue(){}function le(e,n){var r,i,o,s,a,c,u,l=w[e+" "];if(l)return n?0:l.slice(0);for(a=e,c=[],u=t.preFilter;a;){for(s in r&&!(i=B.exec(a))||(i&&(a=a.slice(i[0].length)||a),c.push(o=[])),r=!1,(i=H.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(F," ")}),a=a.slice(r.length)),t.filter)!(i=U[s].exec(a))||u[s]&&!(i=u[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?Q.error(e):w(e,c).slice(0)}function pe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function de(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=b++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,c){var u,l,p=[y,a];if(c){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(l=t[m]||(t[m]={}),i&&k(t,i))t=t[r]||t;else{if((u=l[o])&&u[0]===y&&u[1]===a)return p[2]=u[2];if(l[o]=p,p[2]=e(t,n,c))return!0}return!1}}function fe(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function he(e,t,n,r,i){for(var o,s=[],a=0,c=e.length,u=null!=t;a<c;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),u&&t.push(a)));return s}function ve(e,t,n,r,i,o){return r&&!r[m]&&(r=ve(r)),i&&!i[m]&&(i=ve(i,o)),te((function(o,s,a,c){var u,p,d,f,h=[],g=[],m=s.length,y=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)Q(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),b=!e||!o&&t?y:he(y,h,e,a,c);if(n?n(b,f=i||(o?e:m||r)?[]:s,a,c):f=b,r)for(u=he(f,g),r(u,[],a,c),p=u.length;p--;)(d=u[p])&&(f[g[p]]=!(b[g[p]]=d));if(o){if(i||e){if(i){for(u=[],p=f.length;p--;)(d=f[p])&&u.push(b[p]=d);i(null,f=[],u,c)}for(p=f.length;p--;)(d=f[p])&&(u=i?l.call(o,d):h[p])>-1&&(o[u]=!(s[u]=d))}}else f=he(f===s?f.splice(m,f.length):f),i?i(null,s,f,c):v.apply(s,f)}))}function ge(e){for(var r,i,o,s=e.length,a=t.relative[e[0].type],c=a||t.relative[" "],u=a?1:0,p=de((function(e){return e===r}),c,!0),d=de((function(e){return l.call(r,e)>-1}),c,!0),f=[function(e,t,i){var o=!a&&(i||t!=n)||((r=t).nodeType?p(e,t,i):d(e,t,i));return r=null,o}];u<s;u++)if(i=t.relative[e[u].type])f=[de(fe(f),i)];else{if((i=t.filter[e[u].type].apply(null,e[u].matches))[m]){for(o=++u;o<s&&!t.relative[e[o].type];o++);return ve(u>1&&fe(f),u>1&&pe(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(F,"$1"),i,u<o&&ge(e.slice(u,o)),o<s&&ge(e=e.slice(o)),o<s&&pe(e))}f.push(i)}return fe(f)}function me(e,r){var i,o=[],s=[],a=C[e+" "];if(!a){for(r||(r=le(e)),i=r.length;i--;)(a=ge(r[i]))[m]?o.push(a):s.push(a);a=C(e,function(e,r){var i=r.length>0,o=e.length>0,s=function(s,a,u,l,d){var f,h,g,m=0,b="0",x=s&&[],w=[],C=n,E=s||o&&t.find.TAG("*",d),_=y+=null==C?1:Math.random()||.1,S=E.length;for(d&&(n=a==c||a||d);b!==S&&null!=(f=E[b]);b++){if(o&&f){for(h=0,a||f.ownerDocument==c||(ce(f),u=!p);g=e[h++];)if(g(f,a||c,u)){v.call(l,f);break}d&&(y=_)}i&&((f=!g&&f)&&m--,s&&x.push(f))}if(m+=b,i&&b!==m){for(h=0;g=r[h++];)g(x,w,a,u);if(s){if(m>0)for(;b--;)x[b]||w[b]||(w[b]=O.call(l));w=he(w)}v.apply(l,w),d&&!s&&w.length>0&&m+r.length>1&&T.uniqueSort(l)}return d&&(y=_,n=C),x};return i?te(s):s}(s,o)),a.selector=e}return a}function ye(e,n,r,i){var o,s,a,c,u,l="function"==typeof e&&e,d=!i&&le(e=l.selector||e);if(r=r||[],1===d.length){if((s=d[0]=d[0].slice(0)).length>2&&"ID"===(a=s[0]).type&&9===n.nodeType&&p&&t.relative[s[1].type]){if(!(n=(t.find.ID(a.matches[0].replace(G,K),n)||[])[0]))return r;l&&(n=n.parentNode),e=e.slice(s.shift().value.length)}for(o=U.needsContext.test(e)?0:s.length;o--&&(a=s[o],!t.relative[c=a.type]);)if((u=t.find[c])&&(i=u(a.matches[0].replace(G,K),X.test(s[0].type)&&ae(n.parentNode)||n))){if(s.splice(o,1),!(e=i.length&&pe(s)))return v.apply(r,i),r;break}}return(l||me(e,d))(i,n,!p,r,!n||X.test(e)&&ae(n.parentNode)||n),r}ue.prototype=t.filters=t.pseudos,t.setFilters=new ue,g.sortStable=m.split("").sort(_).join("")===m,ce(),g.sortDetached=ne((function(e){return 1&e.compareDocumentPosition(c.createElement("fieldset"))})),T.find=Q,T.expr[":"]=T.expr.pseudos,T.unique=T.uniqueSort,Q.compile=me,Q.select=ye,Q.setDocument=ce,Q.tokenize=le,Q.escape=T.escapeSelector,Q.getText=T.text,Q.isXML=T.isXMLDoc,Q.selectors=T.expr,Q.support=T.support,Q.uniqueSort=T.uniqueSort}();var N=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&T(e).is(n))break;r.push(e)}return r},L=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},B=T.expr.match.needsContext,H=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function q(e,t,n){return m(t)?T.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?T.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?T.grep(e,(function(e){return l.call(t,e)>-1!==n})):T.filter(t,e,n)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,(function(e){return 1===e.nodeType})))},T.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(T(e).filter((function(){for(t=0;t<r;t++)if(T.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,i[t],n);return r>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(q(this,e||[],!1))},not:function(e){return this.pushStack(q(this,e||[],!0))},is:function(e){return!!q(this,"string"==typeof e&&B.test(e)?T(e):e||[],!1).length}});var z,W=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||z,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:W.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),H.test(r[1])&&T.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=b.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,z=T(b);var U=/^(?:parents|prev(?:Until|All))/,V={children:!0,contents:!0,next:!0,prev:!0};function Y(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&T(e);if(!B.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?l.call(T(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return N(e,"parentNode")},parentsUntil:function(e,t,n){return N(e,"parentNode",n)},next:function(e){return Y(e,"nextSibling")},prev:function(e){return Y(e,"previousSibling")},nextAll:function(e){return N(e,"nextSibling")},prevAll:function(e){return N(e,"previousSibling")},nextUntil:function(e,t,n){return N(e,"nextSibling",n)},prevUntil:function(e,t,n){return N(e,"previousSibling",n)},siblings:function(e){return L((e.parentNode||{}).firstChild,e)},children:function(e){return L(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(k(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},(function(e,t){T.fn[e]=function(n,r){var i=T.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(V[e]||T.uniqueSort(i),U.test(e)&&i.reverse()),this.pushStack(i)}}));var $=/[^\x20\t\r\n\f]+/g;function X(e){return e}function G(e){throw e}function K(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match($)||[],(function(e,n){t[n]=!0})),t}(e):T.extend({},e);var t,n,r,i,o=[],s=[],a=-1,c=function(){for(i=i||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){T.each(n,(function(n,r){m(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==C(r)&&t(r)}))}(arguments),n&&!t&&c()),this},remove:function(){return T.each(arguments,(function(e,t){for(var n;(n=T.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--})),this},has:function(e){return e?T.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return T.Deferred((function(n){T.each(t,(function(t,r){var i=m(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&m(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,i){var o=0;function s(e,t,n,i){return function(){var a=this,c=arguments,u=function(){var r,u;if(!(e<o)){if((r=n.apply(a,c))===t.promise())throw new TypeError("Thenable self-resolution");u=r&&("object"==typeof r||"function"==typeof r)&&r.then,m(u)?i?u.call(r,s(o,t,X,i),s(o,t,G,i)):(o++,u.call(r,s(o,t,X,i),s(o,t,G,i),s(o,t,X,t.notifyWith))):(n!==X&&(a=void 0,c=[r]),(i||t.resolveWith)(a,c))}},l=i?u:function(){try{u()}catch(r){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(r,l.error),e+1>=o&&(n!==G&&(a=void 0,c=[r]),t.rejectWith(a,c))}};e?l():(T.Deferred.getErrorHook?l.error=T.Deferred.getErrorHook():T.Deferred.getStackHook&&(l.error=T.Deferred.getStackHook()),r.setTimeout(l))}}return T.Deferred((function(r){t[0][3].add(s(0,r,m(i)?i:X,r.notifyWith)),t[1][3].add(s(0,r,m(e)?e:X)),t[2][3].add(s(0,r,m(n)?n:G))})).promise()},promise:function(e){return null!=e?T.extend(e,i):i}},o={};return T.each(t,(function(e,r){var s=r[2],a=r[5];i[r[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=s.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=a.call(arguments),o=T.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?a.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(K(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||m(i[n]&&i[n].then)))return o.then();for(;n--;)K(i[n],s(n),o.reject);return o.promise()}});var J=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&J.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){r.setTimeout((function(){throw e}))};var Z=T.Deferred();function Q(){b.removeEventListener("DOMContentLoaded",Q),r.removeEventListener("load",Q),T.ready()}T.fn.ready=function(e){return Z.then(e).catch((function(e){T.readyException(e)})),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||Z.resolveWith(b,[T]))}}),T.ready.then=Z.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(T.ready):(b.addEventListener("DOMContentLoaded",Q),r.addEventListener("load",Q));var ee=function(e,t,n,r,i,o,s){var a=0,c=e.length,u=null==n;if("object"===C(n))for(a in i=!0,n)ee(e,t,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,m(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(T(e),n)})),t))for(;a<c;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):c?t(e[0],n):o},te=/^-ms-/,ne=/-([a-z])/g;function re(e,t){return t.toUpperCase()}function ie(e){return e.replace(te,"ms-").replace(ne,re)}var oe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function se(){this.expando=T.expando+se.uid++}se.uid=1,se.prototype={cache:function(e){var t=e[this.expando];return t||(t={},oe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[ie(t)]=n;else for(r in t)i[ie(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][ie(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(ie):(t=ie(t))in r?[t]:t.match($)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var ae=new se,ce=new se,ue=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,le=/[A-Z]/g;function pe(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(le,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ue.test(e)?JSON.parse(e):e)}(n)}catch(e){}ce.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return ce.hasData(e)||ae.hasData(e)},data:function(e,t,n){return ce.access(e,t,n)},removeData:function(e,t){ce.remove(e,t)},_data:function(e,t,n){return ae.access(e,t,n)},_removeData:function(e,t){ae.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=ce.get(o),1===o.nodeType&&!ae.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=ie(r.slice(5)),pe(o,r,i[r]));ae.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){ce.set(this,e)})):ee(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=ce.get(o,e))||void 0!==(n=pe(o,e))?n:void 0;this.each((function(){ce.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){ce.remove(this,e)}))}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=ae.get(e,t),n&&(!r||Array.isArray(n)?r=ae.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,i=n.shift(),o=T._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){T.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ae.get(e,n)||ae.access(e,n,{empty:T.Callbacks("once memory").add((function(){ae.remove(e,[t+"queue",n])}))})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each((function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){T.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=T.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=ae.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var de=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,fe=new RegExp("^(?:([+-])=|)("+de+")([a-z%]*)$","i"),he=["Top","Right","Bottom","Left"],ve=b.documentElement,ge=function(e){return T.contains(e.ownerDocument,e)},me={composed:!0};ve.getRootNode&&(ge=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(me)===e.ownerDocument});var ye=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ge(e)&&"none"===T.css(e,"display")};function be(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return T.css(e,t,"")},c=a(),u=n&&n[3]||(T.cssNumber[t]?"":"px"),l=e.nodeType&&(T.cssNumber[t]||"px"!==u&&+c)&&fe.exec(T.css(e,t));if(l&&l[3]!==u){for(c/=2,u=u||l[3],l=+c||1;s--;)T.style(e,t,l+u),(1-o)*(1-(o=a()/c||.5))<=0&&(s=0),l/=o;l*=2,T.style(e,t,l+u),n=n||[]}return n&&(l=+l||+c||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=l,r.end=i)),i}var xe={};function we(e){var t,n=e.ownerDocument,r=e.nodeName,i=xe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=T.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),xe[r]=i,i)}function Ce(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=ae.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ye(r)&&(i[o]=we(r))):"none"!==n&&(i[o]="none",ae.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}T.fn.extend({show:function(){return Ce(this,!0)},hide:function(){return Ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ye(this)?T(this).show():T(this).hide()}))}});var Ee,_e,Te=/^(?:checkbox|radio)$/i,Se=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ke=/^$|^module$|\/(?:java|ecma)script/i;Ee=b.createDocumentFragment().appendChild(b.createElement("div")),(_e=b.createElement("input")).setAttribute("type","radio"),_e.setAttribute("checked","checked"),_e.setAttribute("name","t"),Ee.appendChild(_e),g.checkClone=Ee.cloneNode(!0).cloneNode(!0).lastChild.checked,Ee.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!Ee.cloneNode(!0).lastChild.defaultValue,Ee.innerHTML="<option></option>",g.option=!!Ee.lastChild;var Oe={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Pe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&k(e,t)?T.merge([e],n):n}function Ae(e,t){for(var n=0,r=e.length;n<r;n++)ae.set(e[n],"globalEval",!t||ae.get(t[n],"globalEval"))}Oe.tbody=Oe.tfoot=Oe.colgroup=Oe.caption=Oe.thead,Oe.th=Oe.td,g.option||(Oe.optgroup=Oe.option=[1,"<select multiple='multiple'>","</select>"]);var De=/<|&#?\w+;/;function Fe(e,t,n,r,i){for(var o,s,a,c,u,l,p=t.createDocumentFragment(),d=[],f=0,h=e.length;f<h;f++)if((o=e[f])||0===o)if("object"===C(o))T.merge(d,o.nodeType?[o]:o);else if(De.test(o)){for(s=s||p.appendChild(t.createElement("div")),a=(Se.exec(o)||["",""])[1].toLowerCase(),c=Oe[a]||Oe._default,s.innerHTML=c[1]+T.htmlPrefilter(o)+c[2],l=c[0];l--;)s=s.lastChild;T.merge(d,s.childNodes),(s=p.firstChild).textContent=""}else d.push(t.createTextNode(o));for(p.textContent="",f=0;o=d[f++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(u=ge(o),s=Pe(p.appendChild(o),"script"),u&&Ae(s),n)for(l=0;o=s[l++];)ke.test(o.type||"")&&n.push(o);return p}var Re=/^([^.]*)(?:\.(.+)|)/;function Me(){return!0}function je(){return!1}function Ie(e,t,n,r,i,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Ie(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=je;else if(!i)return e;return 1===o&&(s=i,i=function(e){return T().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=T.guid++)),e.each((function(){T.event.add(this,t,i,r,n)}))}function Ne(e,t,n){n?(ae.set(e,t,!1),T.event.add(e,t,{namespace:!1,handler:function(e){var n,r=ae.get(this,t);if(1&e.isTrigger&&this[t]){if(r)(T.event.special[t]||{}).delegateType&&e.stopPropagation();else if(r=a.call(arguments),ae.set(this,t,r),this[t](),n=ae.get(this,t),ae.set(this,t,!1),r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n}else r&&(ae.set(this,t,T.event.trigger(r[0],r.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=Me)}})):void 0===ae.get(e,t)&&T.event.add(e,t,Me)}T.event={global:{},add:function(e,t,n,r,i){var o,s,a,c,u,l,p,d,f,h,v,g=ae.get(e);if(oe(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(ve,i),n.guid||(n.guid=T.guid++),(c=g.events)||(c=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match($)||[""]).length;u--;)f=v=(a=Re.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f&&(p=T.event.special[f]||{},f=(i?p.delegateType:p.bindType)||f,p=T.event.special[f]||{},l=T.extend({type:f,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=c[f])||((d=c[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(f,s)),p.add&&(p.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,l):d.push(l),T.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,s,a,c,u,l,p,d,f,h,v,g=ae.hasData(e)&&ae.get(e);if(g&&(c=g.events)){for(u=(t=(t||"").match($)||[""]).length;u--;)if(f=v=(a=Re.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f){for(p=T.event.special[f]||{},d=c[f=(r?p.delegateType:p.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)l=d[o],!i&&v!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(d.splice(o,1),l.selector&&d.delegateCount--,p.remove&&p.remove.call(e,l));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(e,h,g.handle)||T.removeEvent(e,f,g.handle),delete c[f])}else for(f in c)T.event.remove(e,f+t[u],n,r,!0);T.isEmptyObject(c)&&ae.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=new Array(arguments.length),c=T.event.fix(e),u=(ae.get(this,"events")||Object.create(null))[c.type]||[],l=T.event.special[c.type]||{};for(a[0]=c,t=1;t<arguments.length;t++)a[t]=arguments[t];if(c.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,c)){for(s=T.event.handlers.call(this,c,u),t=0;(i=s[t++])&&!c.isPropagationStopped();)for(c.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!c.isImmediatePropagationStopped();)c.rnamespace&&!1!==o.namespace&&!c.rnamespace.test(o.namespace)||(c.handleObj=o,c.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a))&&!1===(c.result=r)&&(c.preventDefault(),c.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,c),c.result}},handlers:function(e,t){var n,r,i,o,s,a=[],c=t.delegateCount,u=e.target;if(c&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},n=0;n<c;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?T(i,this).index(u)>-1:T.find(i,this,null,[u]).length),s[i]&&o.push(r);o.length&&a.push({elem:u,handlers:o})}return u=this,c<t.length&&a.push({elem:u,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:m(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return Te.test(t.type)&&t.click&&k(t,"input")&&Ne(t,"click",!0),!1},trigger:function(e){var t=this||e;return Te.test(t.type)&&t.click&&k(t,"input")&&Ne(t,"click"),!0},_default:function(e){var t=e.target;return Te.test(t.type)&&t.click&&k(t,"input")&&ae.get(t,"click")||k(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Me:je,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:je,isPropagationStopped:je,isImmediatePropagationStopped:je,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Me,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Me,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Me,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(e,t){function n(e){if(b.documentMode){var n=ae.get(this,"handle"),r=T.event.fix(e);r.type="focusin"===e.type?"focus":"blur",r.isSimulated=!0,n(e),r.target===r.currentTarget&&n(r)}else T.event.simulate(t,e.target,T.event.fix(e))}T.event.special[e]={setup:function(){var r;if(Ne(this,e,!0),!b.documentMode)return!1;(r=ae.get(this,t))||this.addEventListener(t,n),ae.set(this,t,(r||0)+1)},trigger:function(){return Ne(this,e),!0},teardown:function(){var e;if(!b.documentMode)return!1;(e=ae.get(this,t)-1)?ae.set(this,t,e):(this.removeEventListener(t,n),ae.remove(this,t))},_default:function(t){return ae.get(t.target,e)},delegateType:t},T.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=b.documentMode?this:r,o=ae.get(i,t);o||(b.documentMode?this.addEventListener(t,n):r.addEventListener(e,n,!0)),ae.set(i,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=b.documentMode?this:r,o=ae.get(i,t)-1;o?ae.set(i,t,o):(b.documentMode?this.removeEventListener(t,n):r.removeEventListener(e,n,!0),ae.remove(i,t))}}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||T.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),T.fn.extend({on:function(e,t,n,r){return Ie(this,e,t,n,r)},one:function(e,t,n,r){return Ie(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=je),this.each((function(){T.event.remove(this,e,n,t)}))}});var Le=/<script|<style|<link/i,Be=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function qe(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function ze(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function We(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ue(e,t){var n,r,i,o,s,a;if(1===t.nodeType){if(ae.hasData(e)&&(a=ae.get(e).events))for(i in ae.remove(t,"handle events"),a)for(n=0,r=a[i].length;n<r;n++)T.event.add(t,i,a[i][n]);ce.hasData(e)&&(o=ce.access(e),s=T.extend({},o),ce.set(t,s))}}function Ve(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Te.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ye(e,t,n,r){t=c(t);var i,o,s,a,u,l,p=0,d=e.length,f=d-1,h=t[0],v=m(h);if(v||d>1&&"string"==typeof h&&!g.checkClone&&Be.test(h))return e.each((function(i){var o=e.eq(i);v&&(t[0]=h.call(this,i,o.html())),Ye(o,t,n,r)}));if(d&&(o=(i=Fe(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(a=(s=T.map(Pe(i,"script"),ze)).length;p<d;p++)u=i,p!==f&&(u=T.clone(u,!0,!0),a&&T.merge(s,Pe(u,"script"))),n.call(e[p],u,p);if(a)for(l=s[s.length-1].ownerDocument,T.map(s,We),p=0;p<a;p++)u=s[p],ke.test(u.type||"")&&!ae.access(u,"globalEval")&&T.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?T._evalUrl&&!u.noModule&&T._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):w(u.textContent.replace(He,""),u,l))}return e}function $e(e,t,n){for(var r,i=t?T.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(Pe(r)),r.parentNode&&(n&&ge(r)&&Ae(Pe(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),c=ge(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(s=Pe(a),r=0,i=(o=Pe(e)).length;r<i;r++)Ve(o[r],s[r]);if(t)if(n)for(o=o||Pe(e),s=s||Pe(a),r=0,i=o.length;r<i;r++)Ue(o[r],s[r]);else Ue(e,a);return(s=Pe(a,"script")).length>0&&Ae(s,!c&&Pe(e,"script")),a},cleanData:function(e){for(var t,n,r,i=T.event.special,o=0;void 0!==(n=e[o]);o++)if(oe(n)){if(t=n[ae.expando]){if(t.events)for(r in t.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[ae.expando]=void 0}n[ce.expando]&&(n[ce.expando]=void 0)}}}),T.fn.extend({detach:function(e){return $e(this,e,!0)},remove:function(e){return $e(this,e)},text:function(e){return ee(this,(function(e){return void 0===e?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ye(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||qe(this,e).appendChild(e)}))},prepend:function(){return Ye(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=qe(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ye(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ye(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(Pe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return T.clone(this,e,t)}))},html:function(e){return ee(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!Oe[(Se.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(Pe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ye(this,arguments,(function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(Pe(this)),n&&n.replaceChild(t,this))}),e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){T.fn[e]=function(e){for(var n,r=[],i=T(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),T(i[s])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var Xe=new RegExp("^("+de+")(?!px)[a-z%]+$","i"),Ge=/^--/,Ke=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Je=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Ze=new RegExp(he.join("|"),"i");function Qe(e,t,n){var r,i,o,s,a=Ge.test(t),c=e.style;return(n=n||Ke(e))&&(s=n.getPropertyValue(t)||n[t],a&&s&&(s=s.replace(F,"$1")||void 0),""!==s||ge(e)||(s=T.style(e,t)),!g.pixelBoxStyles()&&Xe.test(s)&&Ze.test(t)&&(r=c.width,i=c.minWidth,o=c.maxWidth,c.minWidth=c.maxWidth=c.width=s,s=n.width,c.width=r,c.minWidth=i,c.maxWidth=o)),void 0!==s?s+"":s}function et(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ve.appendChild(u).appendChild(l);var e=r.getComputedStyle(l);n="1%"!==e.top,c=12===t(e.marginLeft),l.style.right="60%",s=36===t(e.right),i=36===t(e.width),l.style.position="absolute",o=12===t(l.offsetWidth/3),ve.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,i,o,s,a,c,u=b.createElement("div"),l=b.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===l.style.backgroundClip,T.extend(g,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),c},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,i;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ve.appendChild(e).appendChild(t).appendChild(n),i=r.getComputedStyle(t),a=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,ve.removeChild(e)),a}}))}();var tt=["Webkit","Moz","ms"],nt=b.createElement("div").style,rt={};function it(e){return T.cssProps[e]||rt[e]||(e in nt?e:rt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=tt.length;n--;)if((e=tt[n]+t)in nt)return e}(e)||e)}var ot=/^(none|table(?!-c[ea]).+)/,st={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function ct(e,t,n){var r=fe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function ut(e,t,n,r,i,o){var s="width"===t?1:0,a=0,c=0,u=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=T.css(e,n+he[s],!0,i)),r?("content"===n&&(c-=T.css(e,"padding"+he[s],!0,i)),"margin"!==n&&(c-=T.css(e,"border"+he[s]+"Width",!0,i))):(c+=T.css(e,"padding"+he[s],!0,i),"padding"!==n?c+=T.css(e,"border"+he[s]+"Width",!0,i):a+=T.css(e,"border"+he[s]+"Width",!0,i));return!r&&o>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-c-a-.5))||0),c+u}function lt(e,t,n){var r=Ke(e),i=(!g.boxSizingReliable()||n)&&"border-box"===T.css(e,"boxSizing",!1,r),o=i,s=Qe(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(Xe.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&i||!g.reliableTrDimensions()&&k(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===T.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===T.css(e,"boxSizing",!1,r),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ut(e,t,n||(i?"border":"content"),o,r,s)+"px"}function pt(e,t,n,r,i){return new pt.prototype.init(e,t,n,r,i)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=ie(t),c=Ge.test(t),u=e.style;if(c||(t=it(a)),s=T.cssHooks[t]||T.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];"string"==(o=typeof n)&&(i=fe.exec(n))&&i[1]&&(n=be(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||c||(n+=i&&i[3]||(T.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(c?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,s,a=ie(t);return Ge.test(t)||(t=it(a)),(s=T.cssHooks[t]||T.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=Qe(e,t,r)),"normal"===i&&t in at&&(i=at[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],(function(e,t){T.cssHooks[t]={get:function(e,n,r){if(n)return!ot.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?lt(e,t,r):Je(e,st,(function(){return lt(e,t,r)}))},set:function(e,n,r){var i,o=Ke(e),s=!g.scrollboxSize()&&"absolute"===o.position,a=(s||r)&&"border-box"===T.css(e,"boxSizing",!1,o),c=r?ut(e,t,r,a,o):0;return a&&s&&(c-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-ut(e,t,"border",!1,o)-.5)),c&&(i=fe.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),ct(0,n,c)}}})),T.cssHooks.marginLeft=et(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Qe(e,"marginLeft"))||e.getBoundingClientRect().left-Je(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(e,t){T.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+he[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(T.cssHooks[e+t].set=ct)})),T.fn.extend({css:function(e,t){return ee(this,(function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=Ke(e),i=t.length;s<i;s++)o[t[s]]=T.css(e,t[s],!1,r);return o}return void 0!==n?T.style(e,t,n):T.css(e,t)}),e,t,arguments.length>1)}}),T.Tween=pt,pt.prototype={constructor:pt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var e=pt.propHooks[this.prop];return e&&e.get?e.get(this):pt.propHooks._default.get(this)},run:function(e){var t,n=pt.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):pt.propHooks._default.set(this),this}},pt.prototype.init.prototype=pt.prototype,pt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[it(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},pt.propHooks.scrollTop=pt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=pt.prototype.init,T.fx.step={};var dt,ft,ht=/^(?:toggle|show|hide)$/,vt=/queueHooks$/;function gt(){ft&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(gt):r.setTimeout(gt,T.fx.interval),T.fx.tick())}function mt(){return r.setTimeout((function(){dt=void 0})),dt=Date.now()}function yt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=he[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function bt(e,t,n){for(var r,i=(xt.tweeners[t]||[]).concat(xt.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function xt(e,t,n){var r,i,o=0,s=xt.prefilters.length,a=T.Deferred().always((function(){delete c.elem})),c=function(){if(i)return!1;for(var t=dt||mt(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(r);return a.notifyWith(e,[u,r,n]),r<1&&s?n:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:dt||mt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=T.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),l=u.props;for(function(e,t){var n,r,i,o,s;for(n in e)if(i=t[r=ie(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=T.cssHooks[r])&&"expand"in s)for(n in o=s.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(l,u.opts.specialEasing);o<s;o++)if(r=xt.prefilters[o].call(u,e,l,u.opts))return m(r.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return T.map(l,bt,u),m(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),T.fx.timer(T.extend(c,{elem:e,anim:u,queue:u.opts.queue})),u}T.Animation=T.extend(xt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return be(n.elem,e,fe.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match($);for(var n,r=0,i=e.length;r<i;r++)n=e[r],xt.tweeners[n]=xt.tweeners[n]||[],xt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,c,u,l,p="width"in t||"height"in t,d=this,f={},h=e.style,v=e.nodeType&&ye(e),g=ae.get(e,"fxshow");for(r in n.queue||(null==(s=T._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always((function(){d.always((function(){s.unqueued--,T.queue(e,"fx").length||s.empty.fire()}))}))),t)if(i=t[r],ht.test(i)){if(delete t[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;v=!0}f[r]=g&&g[r]||T.style(e,r)}if((c=!T.isEmptyObject(t))||!T.isEmptyObject(f))for(r in p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=ae.get(e,"display")),"none"===(l=T.css(e,"display"))&&(u?l=u:(Ce([e],!0),u=e.style.display||u,l=T.css(e,"display"),Ce([e]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===T.css(e,"float")&&(c||(d.done((function(){h.display=u})),null==u&&(l=h.display,u="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),c=!1,f)c||(g?"hidden"in g&&(v=g.hidden):g=ae.access(e,"fxshow",{display:u}),o&&(g.hidden=!v),v&&Ce([e],!0),d.done((function(){for(r in v||Ce([e]),ae.remove(e,"fxshow"),f)T.style(e,r,f[r])}))),c=bt(v?g[r]:0,r,d),r in g||(g[r]=c.start,v&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?xt.prefilters.unshift(e):xt.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ye).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=T.isEmptyObject(e),o=T.speed(t,n,r),s=function(){var t=xt(this,T.extend({},e),o);(i||ae.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=T.timers,s=ae.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&vt.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||T.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=ae.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=T.timers,s=r?r.length:0;for(n.finish=!0,T.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(e,t){var n=T.fn[t];T.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(yt(t,!0),e,r,i)}})),T.each({slideDown:yt("show"),slideUp:yt("hide"),slideToggle:yt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){T.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),dt=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){ft||(ft=!0,gt())},T.fx.stop=function(){ft=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var wt,Ct=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return ee(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){T.removeAttr(this,e)}))}}),T.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?T.prop(e,t,n):(1===o&&T.isXMLDoc(e)||(i=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?wt:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match($);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),wt={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=Ct[t]||T.find.attr;Ct[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=Ct[s],Ct[s]=i,i=null!=n(e,t,r)?s:null,Ct[s]=o),i}}));var Et=/^(?:input|select|textarea|button)$/i,_t=/^(?:a|area)$/i;function Tt(e){return(e.match($)||[]).join(" ")}function St(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match($)||[]}T.fn.extend({prop:function(e,t){return ee(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[T.propFix[e]||e]}))}}),T.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(e)||(t=T.propFix[t]||t,i=T.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):Et.test(e.nodeName)||_t.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(e){var t,n,r,i,o,s;return m(e)?this.each((function(t){T(this).addClass(e.call(this,t,St(this)))})):(t=kt(e)).length?this.each((function(){if(r=St(this),n=1===this.nodeType&&" "+Tt(r)+" "){for(o=0;o<t.length;o++)i=t[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");s=Tt(n),r!==s&&this.setAttribute("class",s)}})):this},removeClass:function(e){var t,n,r,i,o,s;return m(e)?this.each((function(t){T(this).removeClass(e.call(this,t,St(this)))})):arguments.length?(t=kt(e)).length?this.each((function(){if(r=St(this),n=1===this.nodeType&&" "+Tt(r)+" "){for(o=0;o<t.length;o++)for(i=t[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");s=Tt(n),r!==s&&this.setAttribute("class",s)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,r,i,o,s=typeof e,a="string"===s||Array.isArray(e);return m(e)?this.each((function(n){T(this).toggleClass(e.call(this,n,St(this),t),t)})):"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):(n=kt(e),this.each((function(){if(a)for(o=T(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==e&&"boolean"!==s||((r=St(this))&&ae.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===e?"":ae.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+Tt(St(n))+" ").indexOf(t)>-1)return!0;return!1}});var Ot=/\r/g;T.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=m(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,T(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,(function(e){return null==e?"":e+""}))),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Ot,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:Tt(T.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],c=s?o+1:i.length;for(r=o<0?c:s?o:0;r<c;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(t=T(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=T.makeArray(t),s=i.length;s--;)((r=i[s]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},g.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}));var Pt=r.location,At={guid:Date.now()},Dt=/\?/;T.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||T.error("Invalid XML: "+(n?T.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Ft=/^(?:focusinfocus|focusoutblur)$/,Rt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,n,i){var o,s,a,c,u,l,p,d,h=[n||b],v=f.call(e,"type")?e.type:e,g=f.call(e,"namespace")?e.namespace.split("."):[];if(s=d=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!Ft.test(v+T.event.triggered)&&(v.indexOf(".")>-1&&(g=v.split("."),v=g.shift(),g.sort()),u=v.indexOf(":")<0&&"on"+v,(e=e[T.expando]?e:new T.Event(v,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:T.makeArray(t,[e]),p=T.event.special[v]||{},i||!p.trigger||!1!==p.trigger.apply(n,t))){if(!i&&!p.noBubble&&!y(n)){for(c=p.delegateType||v,Ft.test(c+v)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||b)&&h.push(a.defaultView||a.parentWindow||r)}for(o=0;(s=h[o++])&&!e.isPropagationStopped();)d=s,e.type=o>1?c:p.bindType||v,(l=(ae.get(s,"events")||Object.create(null))[e.type]&&ae.get(s,"handle"))&&l.apply(s,t),(l=u&&s[u])&&l.apply&&oe(s)&&(e.result=l.apply(s,t),!1===e.result&&e.preventDefault());return e.type=v,i||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),t)||!oe(n)||u&&m(n[v])&&!y(n)&&((a=n[u])&&(n[u]=null),T.event.triggered=v,e.isPropagationStopped()&&d.addEventListener(v,Rt),n[v](),e.isPropagationStopped()&&d.removeEventListener(v,Rt),T.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each((function(){T.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}});var Mt=/\[\]$/,jt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function Lt(e,t,n,r){var i;if(Array.isArray(t))T.each(t,(function(t,i){n||Mt.test(e)?r(e,i):Lt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==C(t))r(e,t);else for(i in t)Lt(e+"["+i+"]",t[i],n,r)}T.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,(function(){i(this.name,this.value)}));else for(n in e)Lt(n,e[n],t,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Nt.test(this.nodeName)&&!It.test(e)&&(this.checked||!Te.test(e))})).map((function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(e){return{name:t.name,value:e.replace(jt,"\r\n")}})):{name:t.name,value:n.replace(jt,"\r\n")}})).get()}});var Bt=/%20/g,Ht=/#.*$/,qt=/([?&])_=[^&]*/,zt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,Ut=/^\/\//,Vt={},Yt={},$t="*/".concat("*"),Xt=b.createElement("a");function Gt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match($)||[];if(m(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Kt(e,t,n,r){var i={},o=e===Yt;function s(a){var c;return i[a]=!0,T.each(e[a]||[],(function(e,a){var u=a(t,n,r);return"string"!=typeof u||o||i[u]?o?!(c=u):void 0:(t.dataTypes.unshift(u),s(u),!1)})),c}return s(t.dataTypes[0])||!i["*"]&&s("*")}function Jt(e,t){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&T.extend(!0,e,r),e}Xt.href=Pt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Pt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Pt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,T.ajaxSettings),t):Jt(T.ajaxSettings,e)},ajaxPrefilter:Gt(Vt),ajaxTransport:Gt(Yt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,o,s,a,c,u,l,p,d,f=T.ajaxSetup({},t),h=f.context||f,v=f.context&&(h.nodeType||h.jquery)?T(h):T.event,g=T.Deferred(),m=T.Callbacks("once memory"),y=f.statusCode||{},x={},w={},C="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=zt.exec(o);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)E.always(e[E.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||C;return n&&n.abort(t),_(0,t),this}};if(g.promise(E),f.url=((e||f.url||Pt.href)+"").replace(Ut,Pt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match($)||[""],null==f.crossDomain){c=b.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=Xt.protocol+"//"+Xt.host!=c.protocol+"//"+c.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=T.param(f.data,f.traditional)),Kt(Vt,f,t,E),u)return E;for(p in(l=T.event&&f.global)&&0==T.active++&&T.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Wt.test(f.type),i=f.url.replace(Ht,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Bt,"+")):(d=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(Dt.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(qt,"$1"),d=(Dt.test(i)?"&":"?")+"_="+At.guid+++d),f.url=i+d),f.ifModified&&(T.lastModified[i]&&E.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&E.setRequestHeader("If-None-Match",T.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&E.setRequestHeader("Content-Type",f.contentType),E.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+$t+"; q=0.01":""):f.accepts["*"]),f.headers)E.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(h,E,f)||u))return E.abort();if(C="abort",m.add(f.complete),E.done(f.success),E.fail(f.error),n=Kt(Yt,f,t,E)){if(E.readyState=1,l&&v.trigger("ajaxSend",[E,f]),u)return E;f.async&&f.timeout>0&&(a=r.setTimeout((function(){E.abort("timeout")}),f.timeout));try{u=!1,n.send(x,_)}catch(e){if(u)throw e;_(-1,e)}}else _(-1,"No Transport");function _(e,t,s,c){var p,d,b,x,w,C=t;u||(u=!0,a&&r.clearTimeout(a),n=void 0,o=c||"",E.readyState=e>0?4:0,p=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var r,i,o,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){c.unshift(i);break}if(c[0]in n)o=c[0];else{for(i in n){if(!c[0]||e.converters[i+" "+c[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==c[0]&&c.unshift(o),n[o]}(f,E,s)),!p&&T.inArray("script",f.dataTypes)>-1&&T.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),x=function(e,t,n,r){var i,o,s,a,c,u={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=o,o=l.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(!(s=u[c+" "+o]||u["* "+o]))for(i in u)if((a=i.split(" "))[1]===o&&(s=u[c+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[i]:!0!==u[i]&&(o=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+o}}}return{state:"success",data:t}}(f,x,E,p),p?(f.ifModified&&((w=E.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=w),(w=E.getResponseHeader("etag"))&&(T.etag[i]=w)),204===e||"HEAD"===f.type?C="nocontent":304===e?C="notmodified":(C=x.state,d=x.data,p=!(b=x.error))):(b=C,!e&&C||(C="error",e<0&&(e=0))),E.status=e,E.statusText=(t||C)+"",p?g.resolveWith(h,[d,C,E]):g.rejectWith(h,[E,C,b]),E.statusCode(y),y=void 0,l&&v.trigger(p?"ajaxSuccess":"ajaxError",[E,f,p?d:b]),m.fireWith(h,[E,C]),l&&(v.trigger("ajaxComplete",[E,f]),--T.active||T.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],(function(e,t){T[t]=function(e,n,r,i){return m(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:i,data:n,success:r},T.isPlainObject(e)&&e))}})),T.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),T._evalUrl=function(e,t,n){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t,n)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return m(e)?this.each((function(t){T(this).wrapInner(e.call(this,t))})):this.each((function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=m(e);return this.each((function(n){T(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Zt={0:200,1223:204},Qt=T.ajaxSettings.xhr();g.cors=!!Qt&&"withCredentials"in Qt,g.ajax=Qt=!!Qt,T.ajaxTransport((function(e){var t,n;if(g.cors||Qt&&!e.crossDomain)return{send:function(i,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Zt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),T.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),T.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=T("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||T.expando+"_"+At.guid++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",(function(e,t,n){var i,o,s,a=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(nn,"$1"+i):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||T.error(i+" was not called"),s[0]},e.dataTypes[0]="json",o=r[i],r[i]=function(){s=arguments},n.always((function(){void 0===o?T(r).removeProp(i):r[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,tn.push(i)),s&&m(o)&&o(s[0]),s=o=void 0})),"script"})),g.createHTMLDocument=((en=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),o=!n&&[],(i=H.exec(e))?[t.createElement(i[1])]:(i=Fe([e],t,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=Tt(e.slice(a)),e=e.slice(0,a)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&T.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,s.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},T.expr.pseudos.animated=function(e){return T.grep(T.timers,(function(t){return e===t.elem})).length},T.offset={setOffset:function(e,t,n){var r,i,o,s,a,c,u=T.css(e,"position"),l=T(e),p={};"static"===u&&(e.style.position="relative"),a=l.offset(),o=T.css(e,"top"),c=T.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+c).indexOf("auto")>-1?(s=(r=l.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(c)||0),m(t)&&(t=t.call(e,n,T.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):l.css(p)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){T.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),i.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-T.css(r,"marginTop",!0),left:t.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||ve}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;T.fn[e]=function(r){return ee(this,(function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),T.each(["top","left"],(function(e,t){T.cssHooks[t]=et(g.pixelPosition,(function(e,n){if(n)return n=Qe(e,t),Xe.test(n)?T(e).position()[t]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){T.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return ee(this,(function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?T.css(t,n,a):T.style(t,n,i,a)}),t,s?i:void 0,s)}}))})),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){T.fn[t]=function(e){return this.on(t,e)}})),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var rn=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;T.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=a.call(arguments,2),i=function(){return e.apply(t||this,r.concat(a.call(arguments)))},i.guid=e.guid=e.guid||T.guid++,i},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=k,T.isFunction=m,T.isWindow=y,T.camelCase=ie,T.type=C,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},T.trim=function(e){return null==e?"":(e+"").replace(rn,"$1")},void 0===(n=function(){return T}.apply(t,[]))||(e.exports=n);var on=r.jQuery,sn=r.$;return T.noConflict=function(e){return r.$===T&&(r.$=sn),e&&r.jQuery===T&&(r.jQuery=on),T},void 0===i&&(r.jQuery=r.$=T),T}))},9368:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(1703)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},1703:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,o,s=null;function a(...e){if(!a.enabled)return;const r=a,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const o=t.formatters[i];if("function"==typeof o){const t=e[s];n=o.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(2902),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},2902:e=>{var t=1e3,n=60*t,r=60*n,i=24*r,o=7*i;function s(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,a){a=a||{};var c,u,l=typeof e;if("string"===l&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var s=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(s){var a=parseFloat(s[1]);switch((s[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return a*o;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===l&&isFinite(e))return a.long?(c=e,(u=Math.abs(c))>=i?s(c,u,i,"day"):u>=r?s(c,u,r,"hour"):u>=n?s(c,u,n,"minute"):u>=t?s(c,u,t,"second"):c+" ms"):function(e){var o=Math.abs(e);return o>=i?Math.round(e/i)+"d":o>=r?Math.round(e/r)+"h":o>=n?Math.round(e/n)+"m":o>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},852:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))})),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(3995)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},3995:(e,t,n)=>{e.exports=function(e){function t(e){let n,i,o,s=null;function a(...e){if(!a.enabled)return;const r=a,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const o=t.formatters[i];if("function"==typeof o){const t=e[s];n=o.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(218),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},218:e=>{var t=1e3,n=60*t,r=60*n,i=24*r,o=7*i;function s(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,a){a=a||{};var c,u,l=typeof e;if("string"===l&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var s=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(s){var a=parseFloat(s[1]);switch((s[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return a*o;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===l&&isFinite(e))return a.long?(c=e,(u=Math.abs(c))>=i?s(c,u,i,"day"):u>=r?s(c,u,r,"hour"):u>=n?s(c,u,n,"minute"):u>=t?s(c,u,t,"second"):c+" ms"):function(e){var o=Math.abs(e);return o>=i?Math.round(e/i)+"d":o>=r?Math.round(e/r)+"h":o>=n?Math.round(e/n)+"m":o>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},1859:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(4692)),o=n(1321);(0,i.default)(document).ready((function(){(0,o.renderLoginScreen)()}))},9221:function(e,t,n){"use strict";var r,i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderBoard=function(e){void 0===e&&(e=l);for(var t="",n=0;n<u;n++){t+='<div class="board-row">';for(var r=0;r<u;r++)t+='\n        <div \n          class="board-cell" \n          data-row="'.concat(n,'" \n          data-col="').concat(r,'"\n          data-value="').concat(p[e[n][r]],'"\n        >\n        <div class="icon"></div>\n</div>');t+="</div>"}return t},t.renderShipsOnBoard=function(e,t){void 0===t&&(t=!1),(0,o.default)(".board-container .ship-layer").empty(),e.forEach((function(e){var n=(0,c.createShipElement)(e,t);(0,o.default)(".board-container .ship-layer").append(n)}))},t.getCellSize=function(){return parseFloat((0,o.default)(".board-cell").css("width"))},t.isBoardIllegal=function(e){for(var t=0;t<e.length;t++)for(var n=t+1;n<e.length;n++)if((0,c.isShipOverlapping)(e[t],e[n]))return!0;return!1};var o=i(n(4692)),s=n(8117),a=i(n(1167)),c=n(6911),u=(null===(r=null===a.default||void 0===a.default?void 0:a.default.GAME_CONFIG)||void 0===r?void 0:r.boardSize)||10,l=new Array(u).fill(s.Cell.NOT_REVEALED).map((function(){return new Array(u).fill(s.Cell.NOT_REVEALED)})),p={0:"not-revealed",1:"empty",2:"ship",3:"hit-ship",4:"sunk-ship"}},6911:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.convertShipsToUIFormat=void 0,t.defineShips=function(e,t){var n=[];return e.forEach((function(e){for(var t=0;t<e.count;t++)n.push({id:"ship-".concat(e.area,"-").concat(t),startPosition:{row:0,col:0},direction:o.Direction.HORIZONTAL,area:e.area})})),s(n,t),n},t.findShipById=function(e,t){return e.find((function(e){return e.id===t}))},t.updateShip=function(e,t,n){void 0===n&&(n=void 0),e.startPosition=t,void 0!==n&&(e.direction=n)},t.flipShip=function(e,t,n){var r=e.startPosition,i=r.row,s=r.col,a=e.direction,c=e.area;a===o.Direction.VERTICAL?(e.startPosition={row:Math.max(0,i+t),col:Math.max(0,Math.min(s-(c-t-1),n-c))},e.direction=o.Direction.HORIZONTAL):(e.startPosition={row:Math.max(0,Math.min(Math.max(0,i-t),n-c)),col:s+t},e.direction=o.Direction.VERTICAL)},t.createShipElement=function(e,t){var n=e.startPosition,r=n.row,s=n.col;return(0,i.default)("<div>",{class:"ship ship-area-".concat(e.area),css:{gridColumnStart:s+1,gridColumnEnd:e.direction===o.Direction.HORIZONTAL?"span ".concat(e.area):"span 1",gridRowStart:r+1,gridRowEnd:e.direction===o.Direction.VERTICAL?"span ".concat(e.area):"span 1"},"data-ship-id":e.id,"data-direction":e.direction,"data-area":e.area})},t.placeShipsRandomly=s,t.isAllShipsPlaced=function(e){return e.every((function(e){return null!==e.startPosition}))},t.convertShipToServerFormat=function(e){for(var t=[],n=0;n<e.area;n++){var r=e.direction===o.Direction.VERTICAL?e.startPosition.row+n:e.startPosition.row,i=e.direction===o.Direction.HORIZONTAL?e.startPosition.col+n:e.startPosition.col;t.push({row:r,col:i})}return t},t.updateAllShipsOverlap=function(e){(0,i.default)(".ship").attr("data-overlapping","false").css("background-color",""),e.forEach((function(t){var n=e.some((function(e){return t.id!==e.id&&a(t,e)})),r=(0,i.default)('[data-ship-id="'.concat(t.id,'"]'));n?r.attr("data-overlapping","true"):r.attr("data-overlapping","false")}))},t.isShipOverlapping=a;var i=r(n(4692)),o=n(315);function s(e,t){var n=new Set,r=function(e,t,n){return n===o.Direction.HORIZONTAL?t+e:t},i=function(e,t,n){return n===o.Direction.VERTICAL?t+e:t},s=function(e,r){return e>=t||r>=t||n.has("".concat(e,",").concat(r))},a=function(e,t,n,o){for(var a=0;a<n;a++){var c=i(a,e,o),u=r(a,t,o);if(s(c,u))return!1}return!0},c=function(e,t,o,s){for(var a=0;a<o;a++){var c=i(a,e,s),u=r(a,t,s);n.add("".concat(c,",").concat(u))}};return e.forEach((function(e){for(var n=!1;!n;){var r=Math.random()<.5?o.Direction.HORIZONTAL:o.Direction.VERTICAL,i=Math.floor(Math.random()*(t-(r===o.Direction.VERTICAL?e.area-1:0))),s=Math.floor(Math.random()*(t-(r===o.Direction.HORIZONTAL?e.area-1:0)));a(i,s,e.area,r)&&(e.startPosition={row:i,col:s},e.direction=r,c(i,s,e.area,r),n=!0)}})),e}function a(e,t){if(!e.startPosition||!t.startPosition)return!1;for(var n=[],r=0;r<e.area;r++)n.push(e.direction===o.Direction.HORIZONTAL?{row:e.startPosition.row,col:e.startPosition.col+r}:{row:e.startPosition.row+r,col:e.startPosition.col});var i=[];for(r=0;r<t.area;r++)i.push(t.direction===o.Direction.HORIZONTAL?{row:t.startPosition.row,col:t.startPosition.col+r}:{row:t.startPosition.row+r,col:t.startPosition.col});return n.some((function(e){return i.some((function(t){return e.row===t.row&&e.col===t.col}))}))}t.convertShipsToUIFormat=function(e){return e.map((function(e,t){return{id:"ship-".concat(e.length,"-").concat(t),startPosition:e[0],direction:e[0].row===e[1].row?o.Direction.HORIZONTAL:o.Direction.VERTICAL,area:e.length}}))}},8117:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Cell=void 0,function(e){e[e.NOT_REVEALED=0]="NOT_REVEALED",e[e.EMPTY=1]="EMPTY",e[e.SHIP=2]="SHIP",e[e.HIT_SHIP=3]="HIT_SHIP",e[e.SUNK_SHIP=4]="SUNK_SHIP"}(n||(t.Cell=n={}))},315:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Direction=void 0,function(e){e.HORIZONTAL="horizontal",e.VERTICAL="vertical"}(n||(t.Direction=n={}))},3998:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderFindOpponentScreen=void 0;var i=r(n(4692)),o=n(4139),s=n(2669),a=n(4139),c=r(n(1167)),u=n(8061),l=n(9441);t.renderFindOpponentScreen=function(){(0,i.default)(o.IDS.APP).html('\n        <button id="exit-btn" class="btn"><i class="fa fa-arrow-circle-o-left" aria-hidden="true"></i></button>\n        <h1>Battleship</h1>\n        <p class="message">Looking for an opponent...</p>\n        <p class="message"><span class="waiting-players"></span>/<span class="total-players"></span></p>\n    '),p()};var p=function(){(0,i.default)("#exit-btn").on("click",(function(){(0,s.emitEvent)(a.EVENTS.LEAVE_LOBBY,{}),(0,l.renderOpponentSelectionScreen)()})),(0,s.onEvent)(a.EVENTS.PLAYER_LEFT_LOBBY,(function(e){d(e.waitingPlayers,e.totalPlayers)})),(0,s.emitEvent)(a.EVENTS.JOIN_GAME,{playerQuery:{name:c.default.USERNAME},gameConfig:c.default.GAME_CONFIG}),(0,s.onEvent)(a.EVENTS.PLAYER_JOINED,(function(e){d(null==e?void 0:e.waitingPlayers,e.totalPlayers),"SETTING_UP_BOARD"===e.state&&(0,u.renderSetupBoardScreen)()}))},d=function(e,t){(0,i.default)(".waiting-players").text(e),(0,i.default)(".total-players").text(t)}},1126:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=a(0),s.throw=a(1),s.return=a(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,a[0]&&(o=0)),o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((i=(i=o.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderGameScreen=function(e){(0,a.default)(c.IDS.APP).html('\n<button id="exit-btn" class="btn"><i class="fa fa-arrow-circle-o-left" aria-hidden="true"></i></button>\n<div class="game-board">\n    <div class="game-state message"></div>\n    <div class="board-container">\n        <div class="board-grid">\n            <div class="ship-layer game"></div>\n            <div class="cells-layer game"></div>\n        </div>\n</div>\n        \n        \n'),function(){var e=this;(0,a.default)("#exit-btn").on("click",(function(){s&&"FINISHED"!==(null==s?void 0:s.state)&&(0,u.emitEvent)(c.EVENTS.LEAVE_GAME,{}),(0,d.renderOpponentSelectionScreen)()})),(0,u.onEvent)(c.EVENTS.UPDATE_BOARD,(function(t){return r(e,void 0,void 0,(function(){var e,n,r,o,a,c,u,l,p,d;return i(this,(function(i){switch(i.label){case 0:null===(o=null==t?void 0:t.gameState)||void 0===o||o.currentTurn,null==s||s.currentTurn,s=t.gameData,e=0,i.label=1;case 1:return e<(null===(c=null===(a=null==t?void 0:t.attackResult)||void 0===a?void 0:a.positions)||void 0===c?void 0:c.length)?(n=null===(u=null==t?void 0:t.attackResult)||void 0===u?void 0:u.positions[e],[4,g("sunk"===(r=null===(l=null==t?void 0:t.attackResult)||void 0===l?void 0:l.states[e].toLowerCase())?"hit":r,n)]):[3,4];case 2:i.sent(),i.label=3;case 3:return e++,[3,1];case 4:return"FINISHED"===(null==s?void 0:s.state)?[2]:(null===(d=null===(p=null==t?void 0:t.attackResult)||void 0===p?void 0:p.states)||void 0===d?void 0:d.some((function(e){return"MISS"===e})))?[4,h()]:[3,6];case 5:i.sent(),i.label=6;case 6:return v(),[2]}}))}))})),(0,u.onEvent)(c.EVENTS.GAME_FINISHED,(function(e){(0,f.renderGameResultScreen)(e)}))}(),(null==e?void 0:e.gameData)&&(s=e.gameData,v())};var s,a=o(n(4692)),c=n(4139),u=n(2669),l=n(9221),p=n(6911),d=n(9441),f=n(589);function h(){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return(0,a.default)(".board-grid").addClass("flip-board"),setTimeout((function(){(0,a.default)(".cells-layer").html((0,l.renderBoard)()),(0,l.renderShipsOnBoard)([],!1)}),250),[4,new Promise((function(e){return setTimeout(e,500)}))];case 1:return e.sent(),(0,a.default)(".board-grid").removeClass("flip-board"),[2]}}))}))}function v(){var e,t;s.player.id===s.currentTurn?((0,a.default)(".game-state").text("Your turn"),(0,a.default)(".cells-layer").html((0,l.renderBoard)(s.enemies[0].board)),(0,l.renderShipsOnBoard)((0,p.convertShipsToUIFormat)(null===(e=null==s?void 0:s.enemies[0])||void 0===e?void 0:e.sunkShips)),(0,a.default)(".board-cell").on("click",(function(e){var t,n=(0,a.default)(e.currentTarget);if(n&&n.length){var r=+(null==n?void 0:n.attr("data-row")),i=+(null==n?void 0:n.attr("data-col")),o=null===(t=null==s?void 0:s.config)||void 0===t?void 0:t.boardSize;r<0||o<=r||i<0||o<=i||(0,u.emitEvent)(c.EVENTS.PLAYER_SHOOT,{playerBeingAttacked:s.enemies[0].id,positions:[{row:r,col:i}]})}}))):((0,a.default)(".game-state").text("Wait for opponent turn"),(0,a.default)(".cells-layer").html((0,l.renderBoard)(s.player.board)),(0,l.renderShipsOnBoard)((0,p.convertShipsToUIFormat)(null===(t=null==s?void 0:s.player)||void 0===t?void 0:t.ships)))}function g(e,t){return r(this,void 0,void 0,(function(){var n,r,o;return i(this,(function(i){switch(i.label){case 0:return n=t.row,r=t.col,(o=(0,a.default)('[data-row="'.concat(n,'"][data-col="').concat(r,'"]'))).length>0?(o.addClass(e),[4,new Promise((function(e){return setTimeout(e,1500)}))]):[3,2];case 1:i.sent(),null==o||o.removeClass(e),i.label=2;case 2:return[2]}}))}))}},589:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderGameResultScreen=function(e){var t,n,r,a,l,p=e.gameData;(0,i.default)(o.IDS.APP).html('\n<div class="game-board">\n    <div class="game-state message result">'.concat(null==p?void 0:p.state," ").concat(null===(t=null==p?void 0:p.player)||void 0===t?void 0:t.status,'</div>\n    <div class="boards-container">\n    <div class="board-container">\n        <div class="message">your board</div>\n        <div class="board-grid">\n            <div class="ship-layer game">').concat(u(null===(n=null==p?void 0:p.player)||void 0===n?void 0:n.ships),'</div>\n            <div class="cells-layer game">').concat((0,s.renderBoard)(null===(r=null==p?void 0:p.player)||void 0===r?void 0:r.board),'</div>\n        </div>\n    </div>\n    <div class="board-container">\n        <div class="message">enemy board</div>\n        <div class="board-grid">\n            <div class="ship-layer game">').concat(u(null===(a=null==p?void 0:p.enemies[0])||void 0===a?void 0:a.sunkShips),'</div>\n            <div class="cells-layer game">').concat((0,s.renderBoard)(null===(l=null==p?void 0:p.enemies[0])||void 0===l?void 0:l.board),'</div>\n        </div>\n    </div>\n    </div>\n    <button id="exit" class="btn exit">Exit</button>\n</div>      \n')),(0,i.default)("#exit").on("click",c.renderOpponentSelectionScreen)};var i=r(n(4692)),o=n(4139),s=n(9221),a=n(6911),c=n(9441);function u(e){return(0,a.convertShipsToUIFormat)(e).map((function(e){return(0,a.createShipElement)(e,!1).prop("outerHTML")})).join("")}},1321:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderLoginScreen=void 0;var i=r(n(4692)),o=n(4139),s=n(2669),a=n(9441),c=r(n(1167)),u="#".concat("start-btn");t.renderLoginScreen=function(){(0,i.default)(o.IDS.APP).html('\n        <h1>Battleship</h1>\n        <p class="message">Please enter your username</p>\n        <input type="text" id="username" placeholder="username">\n        <button id="start-btn" class="btn">Start</button>\n    '),l()};var l=function(){(0,i.default)(u).on("click",(function(){c.default.USERNAME=(0,i.default)("#username").val(),(0,s.connectSocket)(),(0,s.onEvent)("error",(function(e){console.log(e)})),(0,a.renderOpponentSelectionScreen)()}))}},9441:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderOpponentSelectionScreen=void 0;var i=r(n(4692)),o=n(4139),s=n(2669),a=n(4139),c=n(3998),u=r(n(1167));"#".concat("computer-btn menu"),"#".concat("btn.player.menu"),t.renderOpponentSelectionScreen=function(){(0,i.default)(o.IDS.APP).html('\n        <h1>Battleship</h1>\n        <p class="message">Choose your opponent</p>\n        <div id="player-btn" class="btn player menu">VS Player</div>\n    '),l()};var l=function(){(0,i.default)("#player-btn").on("click",(function(){return p(!0)})),(0,s.emitEvent)(a.EVENTS.CLIENT_CONNECTED,{}),(0,s.onEvent)(a.EVENTS.AVAILABLE_SETTINGS,(function(e){u.default.GAME_CONFIG=e.defaultConfig}))},p=function(e){try{u.default.GAME_CONFIG.isMultiplayer=e}catch(e){console.log(e)}(0,c.renderFindOpponentScreen)()}},8061:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderSetupBoardScreen=function(){var e;i=c.default.GAME_CONFIG.boardSize,c.default.SHIPS=null!==(e=c.default.SHIPS)&&void 0!==e?e:(0,u.defineShips)(c.default.GAME_CONFIG.ships,i);var t=(0,p.renderBoard)();(0,o.default)(a.IDS.APP).html('\n        <button id="exit-btn" class="btn"><i class="fa fa-arrow-circle-o-left" aria-hidden="true"></i></button>\n        <div class="game-board">\n            <h1>Arrange your ships</h1>\n            <p class="message">players ready:<span class="waiting-players">0</span>/<span class="total-players">'.concat(c.default.GAME_CONFIG.numOfPlayers,'</span></p>\n            <div class="board-container">\n                <div class="board-grid">\n                    <div class="cells-layer setup">').concat(t,'</div>\n                    <div class="ship-layer setup"></div>\n                </div>  \n            </div>\n            <div class="btn-container">  \n                <button id="random-btn" class="btn">Random</button>\n                <button id="start-btn" class="btn">Start</button>\n            </div> \n        </div>\n        <div class="game-message message hide">\n            <p>waiting for opponent...</p>\n        </div>\n    ')),(0,p.renderShipsOnBoard)(c.default.SHIPS,!0),m()};var i,o=r(n(4692)),s=r(n(2617)),a=n(4139),c=r(n(1167)),u=n(6911),l=n(315),p=n(9221),d=n(1126),f=n(2669),h=n(9441),v=n(3998);function g(){var e=(0,p.getCellSize)(),t=!1;(0,s.default)(".ship").unset(),(0,s.default)(".ship").draggable({modifiers:[s.default.modifiers.snap({targets:[s.default.snappers.grid({x:e,y:e})],range:1/0,relativePoints:[{x:0,y:0}]}),s.default.modifiers.restrict({restriction:"parent",elementRect:{top:0,left:0,bottom:1,right:1},endOnly:!1})],inertia:!1}).on("dragstart",(function(e){t=!0})).on("dragmove",(function(t){var n,r,i=(0,o.default)(t.target),s=i.data("ship-id"),a=(0,u.findShipById)(c.default.SHIPS,s);if(a){var p=Math.round(t.dy/e)+(null===(n=a.startPosition)||void 0===n?void 0:n.row),d=Math.round(t.dx/e)+(null===(r=a.startPosition)||void 0===r?void 0:r.col);(0,u.updateShip)(a,{row:p,col:d}),(0,u.updateAllShipsOverlap)(c.default.SHIPS),i.css({gridRowStart:p+1,gridColumnStart:d+1,gridColumnEnd:a.direction===l.Direction.HORIZONTAL?"span ".concat(a.area):"span 1",gridRowEnd:a.direction===l.Direction.VERTICAL?"span ".concat(a.area):"span 1",top:"",left:""})}})).on("dragend",(function(e){var n=(0,o.default)(e.target),r=n.data("ship-id");(0,u.findShipById)(c.default.SHIPS,r),"true"===n.attr("data-overlapping")&&alert("Ships are still overlapping! Adjust the position."),setTimeout((function(){t=!1}),500)})),(0,o.default)(".ship").on("click",(function(e){if(!t){var n=(0,o.default)(e.currentTarget),r=n.data("ship-id"),s=(0,p.getCellSize)(),a=(0,u.findShipById)(c.default.SHIPS,r);if(a){var d=n.offset(),f=e.pageX-d.left,h=e.pageY-d.top,v=a.direction===l.Direction.HORIZONTAL?Math.floor(f/s):Math.floor(h/s);(0,u.flipShip)(a,v,i),(0,p.renderShipsOnBoard)(c.default.SHIPS,!0),(0,u.updateAllShipsOverlap)(c.default.SHIPS),g()}}}))}var m=function(){g(),(0,o.default)("#start-btn").on("click",(function(){var e=c.default.SHIPS;if((0,p.isBoardIllegal)(e))alert("Ships are still overlapping! Adjust the position.");else{var t=e.map((function(e){return(0,u.convertShipToServerFormat)(e)}))||[];(0,f.emitEvent)(a.EVENTS.PLAYER_READY,t),(0,o.default)(".game-board").addClass("waiting"),(0,o.default)(".game-message").removeClass("hide")}})),(0,o.default)("#random-btn").on("click",(function(){(0,u.placeShipsRandomly)(c.default.SHIPS,i),(0,p.renderShipsOnBoard)(c.default.SHIPS,!0),g()})),(0,o.default)("#exit-btn").on("click",(function(){(0,f.emitEvent)(a.EVENTS.LEAVE_DURING_SETUP,{}),(0,h.renderOpponentSelectionScreen)()})),(0,f.onEvent)(a.EVENTS.PLAYER_LEFT_DURING_SETUP,(function(e){(0,v.renderFindOpponentScreen)()})),(0,f.onEvent)(a.EVENTS.PLAYER_READY,(function(e){(0,o.default)(".waiting-players").text(null==e?void 0:e.readyCount)})),(0,f.onEvent)(a.EVENTS.ALL_PLAYERS_READY,(function(e){(0,d.renderGameScreen)(e)}))}},4139:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EVENTS=t.IDS=void 0,t.IDS={APP:"#app"},t.EVENTS={JOIN_GAME:"joinGame",AVAILABLE_SETTINGS:"availableSettings",CLIENT_CONNECTED:"clientConnected",PLAYER_JOINED:"playerJoined",LEAVE_LOBBY:"LeaveLobby",PLAYER_LEFT_LOBBY:"playerLeftLobby",PLAYER_READY:"playerReady",ALL_PLAYERS_READY:"allPlayersReady",LEAVE_DURING_SETUP:"leaveDuringSetup",PLAYER_LEFT_DURING_SETUP:"playerLeftDuringSetup",LEAVE_GAME:"leaveGame",GET_GAME_DATA:"getGameData",UPDATE_BOARD:"updateBoard",PLAYER_SHOOT:"playerShoot",ATTACK_RESULT:"attackResult",GAME_FINISHED:"gameFinished"}},3221:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SERVER_URL=void 0,t.SERVER_URL="http://localhost:3000"},2669:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.emitEvent=t.onEvent=t.disconnectSocket=t.connectSocket=void 0;var r=n(8007),i=n(3221),o=(0,r.io)(i.SERVER_URL,{withCredentials:!0,autoConnect:!1});t.connectSocket=function(){return o.connect()},t.disconnectSocket=function(){return o.disconnect()},t.onEvent=function(e,t){o.hasListeners(e)||o.on(e,t)},t.emitEvent=function(e,t){o.emit(e,t)},t.default=o},1167:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={}},4110:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasCORS=void 0;let n=!1;try{n="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){}t.hasCORS=n},8661:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.encode=function(e){let t="";for(let n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){let t={},n=e.split("&");for(let e=0,r=n.length;e<r;e++){let r=n[e].split("=");t[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return t}},1015:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=function(e){if(e.length>8e3)throw"URI too long";const t=e,i=e.indexOf("["),o=e.indexOf("]");-1!=i&&-1!=o&&(e=e.substring(0,i)+e.substring(i,o).replace(/:/g,";")+e.substring(o,e.length));let s=n.exec(e||""),a={},c=14;for(;c--;)a[r[c]]=s[c]||"";return-1!=i&&-1!=o&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a.pathNames=function(e,t){const n=t.replace(/\/{2,9}/g,"/").split("/");return"/"!=t.slice(0,1)&&0!==t.length||n.splice(0,1),"/"==t.slice(-1)&&n.splice(n.length-1,1),n}(0,a.path),a.queryKey=function(e,t){const n={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,r){t&&(n[t]=r)})),n}(0,a.query),a};const n=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"]},4624:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultBinaryType=t.globalThisShim=t.nextTick=void 0,t.createCookieJar=function(){},t.nextTick="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),t.globalThisShim="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")(),t.defaultBinaryType="arraybuffer"},4956:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebTransport=t.WebSocket=t.NodeWebSocket=t.XHR=t.NodeXHR=t.Fetch=t.nextTick=t.parse=t.installTimerFunctions=t.transports=t.TransportError=t.Transport=t.protocol=t.SocketWithUpgrade=t.SocketWithoutUpgrade=t.Socket=void 0;const r=n(8223);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return r.Socket}});var i=n(8223);Object.defineProperty(t,"SocketWithoutUpgrade",{enumerable:!0,get:function(){return i.SocketWithoutUpgrade}}),Object.defineProperty(t,"SocketWithUpgrade",{enumerable:!0,get:function(){return i.SocketWithUpgrade}}),t.protocol=r.Socket.protocol;var o=n(4689);Object.defineProperty(t,"Transport",{enumerable:!0,get:function(){return o.Transport}}),Object.defineProperty(t,"TransportError",{enumerable:!0,get:function(){return o.TransportError}});var s=n(9419);Object.defineProperty(t,"transports",{enumerable:!0,get:function(){return s.transports}});var a=n(5374);Object.defineProperty(t,"installTimerFunctions",{enumerable:!0,get:function(){return a.installTimerFunctions}});var c=n(1015);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return c.parse}});var u=n(4624);Object.defineProperty(t,"nextTick",{enumerable:!0,get:function(){return u.nextTick}});var l=n(8209);Object.defineProperty(t,"Fetch",{enumerable:!0,get:function(){return l.Fetch}});var p=n(2071);Object.defineProperty(t,"NodeXHR",{enumerable:!0,get:function(){return p.XHR}});var d=n(2071);Object.defineProperty(t,"XHR",{enumerable:!0,get:function(){return d.XHR}});var f=n(8716);Object.defineProperty(t,"NodeWebSocket",{enumerable:!0,get:function(){return f.WS}});var h=n(8716);Object.defineProperty(t,"WebSocket",{enumerable:!0,get:function(){return h.WS}});var v=n(4480);Object.defineProperty(t,"WebTransport",{enumerable:!0,get:function(){return v.WT}})},8223:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=t.SocketWithUpgrade=t.SocketWithoutUpgrade=void 0;const i=n(9419),o=n(5374),s=n(8661),a=n(1015),c=n(4454),u=n(6376),l=n(4624),p=(0,r(n(6617)).default)("engine.io-client:socket"),d="function"==typeof addEventListener&&"function"==typeof removeEventListener,f=[];d&&addEventListener("offline",(()=>{p("closing %d connection(s) because the network was lost",f.length),f.forEach((e=>e()))}),!1);class h extends c.Emitter{constructor(e,t){if(super(),this.binaryType=l.defaultBinaryType,this.writeBuffer=[],this._prevBufferLen=0,this._pingInterval=-1,this._pingTimeout=-1,this._maxPayload=-1,this._pingTimeoutTime=1/0,e&&"object"==typeof e&&(t=e,e=null),e){const n=(0,a.parse)(e);t.hostname=n.host,t.secure="https"===n.protocol||"wss"===n.protocol,t.port=n.port,n.query&&(t.query=n.query)}else t.host&&(t.hostname=(0,a.parse)(t.host).host);(0,o.installTimerFunctions)(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=[],this._transportsByName={},t.transports.forEach((e=>{const t=e.prototype.name;this.transports.push(t),this._transportsByName[t]=e})),this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!1},t),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=(0,s.decode)(this.opts.query)),d&&(this.opts.closeOnBeforeunload&&(this._beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this._beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(p("adding listener for the 'offline' event"),this._offlineEventListener=()=>{this._onClose("transport close",{description:"network connection lost"})},f.push(this._offlineEventListener))),this.opts.withCredentials&&(this._cookieJar=(0,l.createCookieJar)()),this._open()}createTransport(e){p('creating transport "%s"',e);const t=Object.assign({},this.opts.query);t.EIO=u.protocol,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port},this.opts.transportOptions[e]);return p("options: %j",n),new this._transportsByName[e](n)}_open(){if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);const e=this.opts.rememberUpgrade&&h.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket")?"websocket":this.transports[0];this.readyState="opening";const t=this.createTransport(e);t.open(),this.setTransport(t)}setTransport(e){p("setting transport %s",e.name),this.transport&&(p("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this._onDrain.bind(this)).on("packet",this._onPacket.bind(this)).on("error",this._onError.bind(this)).on("close",(e=>this._onClose("transport close",e)))}onOpen(){p("socket open"),this.readyState="open",h.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush()}_onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(p('socket receive: type "%s", data "%s"',e.type,e.data),this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this._sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong"),this._resetPingTimeout();break;case"error":const t=new Error("server error");t.code=e.data,this._onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}else p('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this._pingInterval=e.pingInterval,this._pingTimeout=e.pingTimeout,this._maxPayload=e.maxPayload,this.onOpen(),"closed"!==this.readyState&&this._resetPingTimeout()}_resetPingTimeout(){this.clearTimeoutFn(this._pingTimeoutTimer);const e=this._pingInterval+this._pingTimeout;this._pingTimeoutTime=Date.now()+e,this._pingTimeoutTimer=this.setTimeoutFn((()=>{this._onClose("ping timeout")}),e),this.opts.autoUnref&&this._pingTimeoutTimer.unref()}_onDrain(){this.writeBuffer.splice(0,this._prevBufferLen),this._prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this._getWritablePackets();p("flushing %d packets in socket",e.length),this.transport.send(e),this._prevBufferLen=e.length,this.emitReserved("flush")}}_getWritablePackets(){if(!(this._maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let e=1;for(let t=0;t<this.writeBuffer.length;t++){const n=this.writeBuffer[t].data;if(n&&(e+=(0,o.byteLength)(n)),t>0&&e>this._maxPayload)return p("only send %d out of %d packets",t,this.writeBuffer.length),this.writeBuffer.slice(0,t);e+=2}return p("payload size is %d (max: %d)",e,this._maxPayload),this.writeBuffer}_hasPingExpired(){if(!this._pingTimeoutTime)return!0;const e=Date.now()>this._pingTimeoutTime;return e&&(p("throttled timer detected, scheduling connection close"),this._pingTimeoutTime=0,(0,l.nextTick)((()=>{this._onClose("ping timeout")}),this.setTimeoutFn)),e}write(e,t,n){return this._sendPacket("message",e,t,n),this}send(e,t,n){return this._sendPacket("message",e,t,n),this}_sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const i={type:e,data:t,options:n};this.emitReserved("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this._onClose("forced close"),p("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}_onError(e){if(p("socket error %j",e),h.priorWebsocketSuccess=!1,this.opts.tryAllTransports&&this.transports.length>1&&"opening"===this.readyState)return p("trying next transport"),this.transports.shift(),this._open();this.emitReserved("error",e),this._onClose("transport error",e)}_onClose(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){if(p('socket close with reason: "%s"',e),this.clearTimeoutFn(this._pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),d&&(this._beforeunloadEventListener&&removeEventListener("beforeunload",this._beforeunloadEventListener,!1),this._offlineEventListener)){const e=f.indexOf(this._offlineEventListener);-1!==e&&(p("removing listener for the 'offline' event"),f.splice(e,1))}this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this._prevBufferLen=0}}}t.SocketWithoutUpgrade=h,h.protocol=u.protocol;class v extends h{constructor(){super(...arguments),this._upgrades=[]}onOpen(){if(super.onOpen(),"open"===this.readyState&&this.opts.upgrade){p("starting upgrade probes");for(let e=0;e<this._upgrades.length;e++)this._probe(this._upgrades[e])}}_probe(e){p('probing transport "%s"',e);let t=this.createTransport(e),n=!1;h.priorWebsocketSuccess=!1;const r=()=>{n||(p('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!n)if("pong"===r.type&&"probe"===r.data){if(p('probe transport "%s" pong',e),this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;h.priorWebsocketSuccess="websocket"===t.name,p('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{n||"closed"!==this.readyState&&(p("changing transport and sending upgrade packet"),u(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{p('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,this.emitReserved("upgradeError",n)}})))};function i(){n||(n=!0,u(),t.close(),t=null)}const o=n=>{const r=new Error("probe error: "+n);r.transport=t.name,i(),p('probe transport "%s" failed because of error: %s',e,n),this.emitReserved("upgradeError",r)};function s(){o("transport closed")}function a(){o("socket closed")}function c(e){t&&e.name!==t.name&&(p('"%s" works - aborting "%s"',e.name,t.name),i())}const u=()=>{t.removeListener("open",r),t.removeListener("error",o),t.removeListener("close",s),this.off("close",a),this.off("upgrading",c)};t.once("open",r),t.once("error",o),t.once("close",s),this.once("close",a),this.once("upgrading",c),-1!==this._upgrades.indexOf("webtransport")&&"webtransport"!==e?this.setTimeoutFn((()=>{n||t.open()}),200):t.open()}onHandshake(e){this._upgrades=this._filterUpgrades(e.upgrades),super.onHandshake(e)}_filterUpgrades(e){const t=[];for(let n=0;n<e.length;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}t.SocketWithUpgrade=v,t.Socket=class extends v{constructor(e,t={}){const n="object"==typeof e?e:t;(!n.transports||n.transports&&"string"==typeof n.transports[0])&&(n.transports=(n.transports||["polling","websocket","webtransport"]).map((e=>i.transports[e])).filter((e=>!!e))),super(e,n)}}},4689:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Transport=t.TransportError=void 0;const i=n(6376),o=n(4454),s=n(5374),a=n(8661),c=(0,r(n(6617)).default)("engine.io-client:transport");class u extends Error{constructor(e,t,n){super(e),this.description=t,this.context=n,this.type="TransportError"}}t.TransportError=u;class l extends o.Emitter{constructor(e){super(),this.writable=!1,(0,s.installTimerFunctions)(this,e),this.opts=e,this.query=e.query,this.socket=e.socket,this.supportsBinary=!e.forceBase64}onError(e,t,n){return super.emitReserved("error",new u(e,t,n)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):c("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=(0,i.decodePacket)(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}pause(e){}createUri(e,t={}){return e+"://"+this._hostname()+this._port()+this.opts.path+this._query(t)}_hostname(){const e=this.opts.hostname;return-1===e.indexOf(":")?e:"["+e+"]"}_port(){return this.opts.port&&(this.opts.secure&&Number(443!==this.opts.port)||!this.opts.secure&&80!==Number(this.opts.port))?":"+this.opts.port:""}_query(e){const t=(0,a.encode)(e);return t.length?"?"+t:""}}t.Transport=l},9419:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transports=void 0;const r=n(2071),i=n(8716),o=n(4480);t.transports={websocket:i.WS,webtransport:o.WT,polling:r.XHR}},8209:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fetch=void 0;const r=n(528);class i extends r.Polling{doPoll(){this._fetch().then((e=>{if(!e.ok)return this.onError("fetch read error",e.status,e);e.text().then((e=>this.onData(e)))})).catch((e=>{this.onError("fetch read error",e)}))}doWrite(e,t){this._fetch(e).then((e=>{if(!e.ok)return this.onError("fetch write error",e.status,e);t()})).catch((e=>{this.onError("fetch write error",e)}))}_fetch(e){var t;const n=void 0!==e,r=new Headers(this.opts.extraHeaders);return n&&r.set("content-type","text/plain;charset=UTF-8"),null===(t=this.socket._cookieJar)||void 0===t||t.appendCookies(r),fetch(this.uri(),{method:n?"POST":"GET",body:n?e:null,headers:r,credentials:this.opts.withCredentials?"include":"omit"}).then((e=>{var t;return null===(t=this.socket._cookieJar)||void 0===t||t.parseCookies(e.headers.getSetCookie()),e}))}}t.Fetch=i},2071:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.XHR=t.Request=t.BaseXHR=void 0;const i=n(528),o=n(4454),s=n(5374),a=n(4624),c=n(4110),u=(0,r(n(6617)).default)("engine.io-client:polling");function l(){}class p extends i.Polling{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port}}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",((e,t)=>{this.onError("xhr post error",e,t)}))}doPoll(){u("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",((e,t)=>{this.onError("xhr poll error",e,t)})),this.pollXhr=e}}t.BaseXHR=p;class d extends o.Emitter{constructor(e,t,n){super(),this.createRequest=e,(0,s.installTimerFunctions)(this,n),this._opts=n,this._method=n.method||"GET",this._uri=t,this._data=void 0!==n.data?n.data:null,this._create()}_create(){var e;const t=(0,s.pick)(this._opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this._opts.xd;const n=this._xhr=this.createRequest(t);try{u("xhr open %s: %s",this._method,this._uri),n.open(this._method,this._uri,!0);try{if(this._opts.extraHeaders){n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0);for(let e in this._opts.extraHeaders)this._opts.extraHeaders.hasOwnProperty(e)&&n.setRequestHeader(e,this._opts.extraHeaders[e])}}catch(e){}if("POST"===this._method)try{n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}null===(e=this._opts.cookieJar)||void 0===e||e.addCookies(n),"withCredentials"in n&&(n.withCredentials=this._opts.withCredentials),this._opts.requestTimeout&&(n.timeout=this._opts.requestTimeout),n.onreadystatechange=()=>{var e;3===n.readyState&&(null===(e=this._opts.cookieJar)||void 0===e||e.parseCookies(n.getResponseHeader("set-cookie"))),4===n.readyState&&(200===n.status||1223===n.status?this._onLoad():this.setTimeoutFn((()=>{this._onError("number"==typeof n.status?n.status:0)}),0))},u("xhr data %s",this._data),n.send(this._data)}catch(e){return void this.setTimeoutFn((()=>{this._onError(e)}),0)}"undefined"!=typeof document&&(this._index=d.requestsCount++,d.requests[this._index]=this)}_onError(e){this.emitReserved("error",e,this._xhr),this._cleanup(!0)}_cleanup(e){if(void 0!==this._xhr&&null!==this._xhr){if(this._xhr.onreadystatechange=l,e)try{this._xhr.abort()}catch(e){}"undefined"!=typeof document&&delete d.requests[this._index],this._xhr=null}}_onLoad(){const e=this._xhr.responseText;null!==e&&(this.emitReserved("data",e),this.emitReserved("success"),this._cleanup())}abort(){this._cleanup()}}if(t.Request=d,d.requestsCount=0,d.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){const e="onpagehide"in a.globalThisShim?"pagehide":"unload";addEventListener(e,f,!1)}function f(){for(let e in d.requests)d.requests.hasOwnProperty(e)&&d.requests[e].abort()}const h=function(){const e=v({xdomain:!1});return e&&null!==e.responseType}();function v(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||c.hasCORS))return new XMLHttpRequest}catch(e){}if(!t)try{return new(a.globalThisShim[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}t.XHR=class extends p{constructor(e){super(e);const t=e&&e.forceBase64;this.supportsBinary=h&&!t}request(e={}){return Object.assign(e,{xd:this.xd},this.opts),new d(v,this.uri(),e)}}},528:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Polling=void 0;const i=n(4689),o=n(5374),s=n(6376),a=(0,r(n(6617)).default)("engine.io-client:polling");class c extends i.Transport{constructor(){super(...arguments),this._polling=!1}get name(){return"polling"}doOpen(){this._poll()}pause(e){this.readyState="pausing";const t=()=>{a("paused"),this.readyState="paused",e()};if(this._polling||!this.writable){let e=0;this._polling&&(a("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){a("pre-pause polling complete"),--e||t()}))),this.writable||(a("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){a("pre-pause writing complete"),--e||t()})))}else t()}_poll(){a("polling"),this._polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){a("polling got data %s",e),(0,s.decodePayload)(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this._polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState?this._poll():a('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=()=>{a("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(a("transport open - closing"),e()):(a("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,(0,s.encodePayload)(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){const e=this.opts.secure?"https":"http",t=this.query||{};return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=(0,o.randomString)()),this.supportsBinary||t.sid||(t.b64=1),this.createUri(e,t)}}t.Polling=c},8716:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WS=t.BaseWS=void 0;const i=n(4689),o=n(5374),s=n(6376),a=n(4624),c=(0,r(n(6617)).default)("engine.io-client:websocket"),u="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class l extends i.Transport{get name(){return"websocket"}doOpen(){const e=this.uri(),t=this.opts.protocols,n=u?{}:(0,o.pick)(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=this.createSocket(e,t,n)}catch(e){return this.emitReserved("error",e)}this.ws.binaryType=this.socket.binaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;(0,s.encodePacket)(n,this.supportsBinary,(e=>{try{this.doWrite(n,e)}catch(e){c("websocket closed before onclose event")}r&&(0,a.nextTick)((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.onerror=()=>{},this.ws.close(),this.ws=null)}uri(){const e=this.opts.secure?"wss":"ws",t=this.query||{};return this.opts.timestampRequests&&(t[this.opts.timestampParam]=(0,o.randomString)()),this.supportsBinary||(t.b64=1),this.createUri(e,t)}}t.BaseWS=l;const p=a.globalThisShim.WebSocket||a.globalThisShim.MozWebSocket;t.WS=class extends l{createSocket(e,t,n){return u?new p(e,t,n):t?new p(e,t):new p(e)}doWrite(e,t){this.ws.send(t)}}},4480:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WT=void 0;const i=n(4689),o=n(4624),s=n(6376),a=(0,r(n(6617)).default)("engine.io-client:webtransport");class c extends i.Transport{get name(){return"webtransport"}doOpen(){try{this._transport=new WebTransport(this.createUri("https"),this.opts.transportOptions[this.name])}catch(e){return this.emitReserved("error",e)}this._transport.closed.then((()=>{a("transport closed gracefully"),this.onClose()})).catch((e=>{a("transport closed due to %s",e),this.onError("webtransport error",e)})),this._transport.ready.then((()=>{this._transport.createBidirectionalStream().then((e=>{const t=(0,s.createPacketDecoderStream)(Number.MAX_SAFE_INTEGER,this.socket.binaryType),n=e.readable.pipeThrough(t).getReader(),r=(0,s.createPacketEncoderStream)();r.readable.pipeTo(e.writable),this._writer=r.writable.getWriter();const i=()=>{n.read().then((({done:e,value:t})=>{e?a("session is closed"):(a("received chunk: %o",t),this.onPacket(t),i())})).catch((e=>{a("an error occurred while reading: %s",e)}))};i();const o={type:"open"};this.query.sid&&(o.data=`{"sid":"${this.query.sid}"}`),this._writer.write(o).then((()=>this.onOpen()))}))}))}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;this._writer.write(n).then((()=>{r&&(0,o.nextTick)((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){var e;null===(e=this._transport)||void 0===e||e.close()}}t.WT=c},5374:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pick=function(e,...t){return t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})},t.installTimerFunctions=function(e,t){t.useNativeTimers?(e.setTimeoutFn=i.bind(r.globalThisShim),e.clearTimeoutFn=o.bind(r.globalThisShim)):(e.setTimeoutFn=r.globalThisShim.setTimeout.bind(r.globalThisShim),e.clearTimeoutFn=r.globalThisShim.clearTimeout.bind(r.globalThisShim))},t.byteLength=function(e){return"string"==typeof e?function(e){let t=0,n=0;for(let r=0,i=e.length;r<i;r++)t=e.charCodeAt(r),t<128?n+=1:t<2048?n+=2:t<55296||t>=57344?n+=3:(r++,n+=4);return n}(e):Math.ceil((e.byteLength||e.size)*s)},t.randomString=function(){return Date.now().toString(36).substring(3)+Math.random().toString(36).substring(2,5)};const r=n(4624),i=r.globalThisShim.setTimeout,o=r.globalThisShim.clearTimeout,s=1.33},2046:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ERROR_PACKET=t.PACKET_TYPES_REVERSE=t.PACKET_TYPES=void 0;const n=Object.create(null);t.PACKET_TYPES=n,n.open="0",n.close="1",n.ping="2",n.pong="3",n.message="4",n.upgrade="5",n.noop="6";const r=Object.create(null);t.PACKET_TYPES_REVERSE=r,Object.keys(n).forEach((e=>{r[n[e]]=e})),t.ERROR_PACKET={type:"error",data:"parser error"}},2745:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0;const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let e=0;e<64;e++)r[n.charCodeAt(e)]=e;t.encode=e=>{let t,r=new Uint8Array(e),i=r.length,o="";for(t=0;t<i;t+=3)o+=n[r[t]>>2],o+=n[(3&r[t])<<4|r[t+1]>>4],o+=n[(15&r[t+1])<<2|r[t+2]>>6],o+=n[63&r[t+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},t.decode=e=>{let t,n,i,o,s,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);const l=new ArrayBuffer(a),p=new Uint8Array(l);for(t=0;t<c;t+=4)n=r[e.charCodeAt(t)],i=r[e.charCodeAt(t+1)],o=r[e.charCodeAt(t+2)],s=r[e.charCodeAt(t+3)],p[u++]=n<<2|i>>4,p[u++]=(15&i)<<4|o>>2,p[u++]=(3&o)<<6|63&s;return l}},2662:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodePacket=void 0;const r=n(2046),i=n(2745),o="function"==typeof ArrayBuffer;t.decodePacket=(e,t)=>{if("string"!=typeof e)return{type:"message",data:a(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:s(e.substring(1),t)}:r.PACKET_TYPES_REVERSE[n]?e.length>1?{type:r.PACKET_TYPES_REVERSE[n],data:e.substring(1)}:{type:r.PACKET_TYPES_REVERSE[n]}:r.ERROR_PACKET};const s=(e,t)=>{if(o){const n=(0,i.decode)(e);return a(n,t)}return{base64:!0,data:e}},a=(e,t)=>"blob"===t?e instanceof Blob?e:new Blob([e]):e instanceof ArrayBuffer?e:e.buffer},2686:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.encodePacket=void 0,t.encodePacketToBinary=function(e,t){return i&&e.data instanceof Blob?e.data.arrayBuffer().then(u).then(t):o&&(e.data instanceof ArrayBuffer||s(e.data))?t(u(e.data)):void a(e,!1,(e=>{l||(l=new TextEncoder),t(l.encode(e))}))};const r=n(2046),i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),o="function"==typeof ArrayBuffer,s=e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer instanceof ArrayBuffer,a=({type:e,data:t},n,a)=>i&&t instanceof Blob?n?a(t):c(t,a):o&&(t instanceof ArrayBuffer||s(t))?n?a(t):c(new Blob([t]),a):a(r.PACKET_TYPES[e]+(t||""));t.encodePacket=a;const c=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+(e||""))},n.readAsDataURL(e)};function u(e){return e instanceof Uint8Array?e:e instanceof ArrayBuffer?new Uint8Array(e):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)}let l},6376:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodePayload=t.decodePacket=t.encodePayload=t.encodePacket=t.protocol=void 0,t.createPacketEncoderStream=function(){return new TransformStream({transform(e,t){(0,r.encodePacketToBinary)(e,(n=>{const r=n.length;let i;if(r<126)i=new Uint8Array(1),new DataView(i.buffer).setUint8(0,r);else if(r<65536){i=new Uint8Array(3);const e=new DataView(i.buffer);e.setUint8(0,126),e.setUint16(1,r)}else{i=new Uint8Array(9);const e=new DataView(i.buffer);e.setUint8(0,127),e.setBigUint64(1,BigInt(r))}e.data&&"string"!=typeof e.data&&(i[0]|=128),t.enqueue(i),t.enqueue(n)}))}})},t.createPacketDecoderStream=function(e,t){a||(a=new TextDecoder);const n=[];let r=0,s=-1,l=!1;return new TransformStream({transform(p,d){for(n.push(p);;){if(0===r){if(c(n)<1)break;const e=u(n,1);l=!(128&~e[0]),s=127&e[0],r=s<126?3:126===s?1:2}else if(1===r){if(c(n)<2)break;const e=u(n,2);s=new DataView(e.buffer,e.byteOffset,e.length).getUint16(0),r=3}else if(2===r){if(c(n)<8)break;const e=u(n,8),t=new DataView(e.buffer,e.byteOffset,e.length),i=t.getUint32(0);if(i>Math.pow(2,21)-1){d.enqueue(o.ERROR_PACKET);break}s=i*Math.pow(2,32)+t.getUint32(4),r=3}else{if(c(n)<s)break;const e=u(n,s);d.enqueue((0,i.decodePacket)(l?e:a.decode(e),t)),r=0}if(0===s||s>e){d.enqueue(o.ERROR_PACKET);break}}}})};const r=n(2686);Object.defineProperty(t,"encodePacket",{enumerable:!0,get:function(){return r.encodePacket}});const i=n(2662);Object.defineProperty(t,"decodePacket",{enumerable:!0,get:function(){return i.decodePacket}});const o=n(2046),s=String.fromCharCode(30);let a;function c(e){return e.reduce(((e,t)=>e+t.length),0)}function u(e,t){if(e[0].length===t)return e.shift();const n=new Uint8Array(t);let r=0;for(let i=0;i<t;i++)n[i]=e[0][r++],r===e[0].length&&(e.shift(),r=0);return e.length&&r<e[0].length&&(e[0]=e[0].slice(r)),n}t.encodePayload=(e,t)=>{const n=e.length,i=new Array(n);let o=0;e.forEach(((e,a)=>{(0,r.encodePacket)(e,!1,(e=>{i[a]=e,++o===n&&t(i.join(s))}))}))},t.decodePayload=(e,t)=>{const n=e.split(s),r=[];for(let e=0;e<n.length;e++){const o=(0,i.decodePacket)(n[e],t);if(r.push(o),"error"===o.type)break}return r},t.protocol=4},7743:(e,t)=>{"use strict";function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}Object.defineProperty(t,"__esModule",{value:!0}),t.Backoff=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=1&Math.floor(10*t)?e+n:e-n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},8007:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebTransport=t.WebSocket=t.NodeWebSocket=t.XHR=t.NodeXHR=t.Fetch=t.Socket=t.Manager=t.protocol=void 0,t.io=u,t.connect=u,t.default=u;const i=n(6894),o=n(3776);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return o.Manager}});const s=n(6214);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return s.Socket}});const a=(0,r(n(9368)).default)("socket.io-client"),c={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const n=(0,i.url)(e,t.path||"/socket.io"),r=n.source,s=n.id,u=n.path,l=c[s]&&u in c[s].nsps;let p;return t.forceNew||t["force new connection"]||!1===t.multiplex||l?(a("ignoring socket cache for %s",r),p=new o.Manager(r,t)):(c[s]||(a("new io instance for %s",r),c[s]=new o.Manager(r,t)),p=c[s]),n.query&&!t.query&&(t.query=n.queryKey),p.socket(n.path,t)}Object.assign(u,{Manager:o.Manager,Socket:s.Socket,io:u,connect:u});var l=n(4627);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return l.protocol}});var p=n(4956);Object.defineProperty(t,"Fetch",{enumerable:!0,get:function(){return p.Fetch}}),Object.defineProperty(t,"NodeXHR",{enumerable:!0,get:function(){return p.NodeXHR}}),Object.defineProperty(t,"XHR",{enumerable:!0,get:function(){return p.XHR}}),Object.defineProperty(t,"NodeWebSocket",{enumerable:!0,get:function(){return p.NodeWebSocket}}),Object.defineProperty(t,"WebSocket",{enumerable:!0,get:function(){return p.WebSocket}}),Object.defineProperty(t,"WebTransport",{enumerable:!0,get:function(){return p.WebTransport}}),e.exports=u},3776:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return i(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const a=n(4956),c=n(6214),u=o(n(4627)),l=n(5942),p=n(7743),d=n(4454),f=(0,s(n(9368)).default)("socket.io-client:manager");class h extends d.Emitter{constructor(e,t){var n;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,(0,a.installTimerFunctions)(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(n=t.randomizationFactor)&&void 0!==n?n:.5),this.backoff=new p.Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const r=t.parser||u;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,e||(this.skipReconnect=!0),this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(f("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;f("opening %s",this.uri),this.engine=new a.Socket(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const r=(0,l.on)(t,"open",(function(){n.onopen(),e&&e()})),i=t=>{f("error"),this.cleanup(),this._readyState="closed",this.emitReserved("error",t),e?e(t):this.maybeReconnectOnOpen()},o=(0,l.on)(t,"error",i);if(!1!==this._timeout){const e=this._timeout;f("connect attempt will timeout after %d",e);const n=this.setTimeoutFn((()=>{f("connect attempt timed out after %d",e),r(),i(new Error("timeout")),t.close()}),e);this.opts.autoUnref&&n.unref(),this.subs.push((()=>{this.clearTimeoutFn(n)}))}return this.subs.push(r),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){f("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push((0,l.on)(e,"ping",this.onping.bind(this)),(0,l.on)(e,"data",this.ondata.bind(this)),(0,l.on)(e,"error",this.onerror.bind(this)),(0,l.on)(e,"close",this.onclose.bind(this)),(0,l.on)(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){try{this.decoder.add(e)}catch(e){this.onclose("parse error",e)}}ondecoded(e){(0,a.nextTick)((()=>{this.emitReserved("packet",e)}),this.setTimeoutFn)}onerror(e){f("error",e),this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n?this._autoConnect&&!n.active&&n.connect():(n=new c.Socket(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void f("socket %s is still active, skipping close",e);this._close()}_packet(e){f("writing packet %j",e);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){f("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){f("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close")}disconnect(){return this._close()}onclose(e,t){var n;f("closed due to %s",e),this.cleanup(),null===(n=this.engine)||void 0===n||n.close(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)f("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();f("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=this.setTimeoutFn((()=>{e.skipReconnect||(f("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(f("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(f("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((()=>{this.clearTimeoutFn(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=h},5942:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=function(e,t,n){return e.on(t,n),function(){e.off(t,n)}}},6214:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const i=n(4627),o=n(5942),s=n(4454),a=(0,r(n(9368)).default)("socket.io-client:socket"),c=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class u extends s.Emitter{constructor(e,t,n){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this._opts=Object.assign({},n),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[(0,o.on)(e,"open",this.onopen.bind(this)),(0,o.on)(e,"packet",this.onpacket.bind(this)),(0,o.on)(e,"error",this.onerror.bind(this)),(0,o.on)(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){var n,r,o;if(c.hasOwnProperty(e))throw new Error('"'+e.toString()+'" is a reserved event name');if(t.unshift(e),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(t),this;const s={type:i.PacketType.EVENT,data:t,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++;a("emitting packet with ack id %d",e);const n=t.pop();this._registerAckCallback(e,n),s.id=e}const u=null===(r=null===(n=this.io.engine)||void 0===n?void 0:n.transport)||void 0===r?void 0:r.writable,l=this.connected&&!(null===(o=this.io.engine)||void 0===o?void 0:o._hasPingExpired());return this.flags.volatile&&!u?a("discard packet as the transport is not currently writable"):l?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s),this.flags={},this}_registerAckCallback(e,t){var n;const r=null!==(n=this.flags.timeout)&&void 0!==n?n:this._opts.ackTimeout;if(void 0===r)return void(this.acks[e]=t);const i=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&(a("removing packet with ack id %d from the buffer",e),this.sendBuffer.splice(t,1));a("event with ack id %d has timed out after %d ms",e,r),t.call(this,new Error("operation has timed out"))}),r),o=(...e)=>{this.io.clearTimeoutFn(i),t.apply(this,e)};o.withError=!0,this.acks[e]=o}emitWithAck(e,...t){return new Promise(((n,r)=>{const i=(e,t)=>e?r(e):n(t);i.withError=!0,t.push(i),this.emit(e,...t)}))}_addToQueue(e){let t;"function"==typeof e[e.length-1]&&(t=e.pop());const n={id:this._queueSeq++,tryCount:0,pending:!1,args:e,flags:Object.assign({fromQueue:!0},this.flags)};e.push(((e,...r)=>{if(n===this._queue[0])return null!==e?n.tryCount>this._opts.retries&&(a("packet [%d] is discarded after %d tries",n.id,n.tryCount),this._queue.shift(),t&&t(e)):(a("packet [%d] was successfully sent",n.id),this._queue.shift(),t&&t(null,...r)),n.pending=!1,this._drainQueue()})),this._queue.push(n),this._drainQueue()}_drainQueue(e=!1){if(a("draining queue"),!this.connected||0===this._queue.length)return;const t=this._queue[0];!t.pending||e?(t.pending=!0,t.tryCount++,a("sending packet [%d] (try n°%d)",t.id,t.tryCount),this.flags=t.flags,this.emit.apply(this,t.args)):a("packet [%d] has already been sent and is waiting for an ack",t.id)}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){a("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this._sendConnectPacket(e)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(e){this.packet({type:i.PacketType.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},e):e})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){a("close (%s)",e),this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t),this._clearAcks()}_clearAcks(){Object.keys(this.acks).forEach((e=>{if(!this.sendBuffer.some((t=>String(t.id)===e))){const t=this.acks[e];delete this.acks[e],t.withError&&t.call(this,new Error("socket has been disconnected"))}}))}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case i.PacketType.CONNECT:e.data&&e.data.sid?this.onconnect(e.data.sid,e.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case i.PacketType.EVENT:case i.PacketType.BINARY_EVENT:this.onevent(e);break;case i.PacketType.ACK:case i.PacketType.BINARY_ACK:this.onack(e);break;case i.PacketType.DISCONNECT:this.ondisconnect();break;case i.PacketType.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];a("emitting event %j",t),null!=e.id&&(a("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e),this._pid&&e.length&&"string"==typeof e[e.length-1]&&(this._lastOffset=e[e.length-1])}ack(e){const t=this;let n=!1;return function(...r){n||(n=!0,a("sending ack %j",r),t.packet({type:i.PacketType.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(delete this.acks[e.id],a("calling ack %s with %j",e.id,e.data),t.withError&&e.data.unshift(null),t.apply(this,e.data)):a("bad ack %s",e.id)}onconnect(e,t){a("socket connected with id %s",e),this.id=e,this.recovered=t&&this._pid===t,this._pid=t,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>{this.notifyOutgoingListeners(e),this.packet(e)})),this.sendBuffer=[]}ondisconnect(){a("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(a("performing disconnect (%s)",this.nsp),this.packet({type:i.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const n of t)n.apply(this,e.data)}}}t.Socket=u},6894:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.url=function(e,t="",n){let r=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),r=(0,i.parse)(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const s=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+s+":"+r.port+t,r.href=r.protocol+"://"+s+(n&&n.port===r.port?"":":"+r.port),r};const i=n(4956),o=(0,r(n(9368)).default)("socket.io-client:url")},4926:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=n(9133);function i(e,t){if(!e)return e;if((0,r.isBinary)(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=i(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=i(e[r],t));return n}return e}function o(e,t){if(!e)return e;if(e&&!0===e._placeholder){if("number"==typeof e.num&&e.num>=0&&e.num<t.length)return t[e.num];throw new Error("illegal attachments")}if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=o(e[n],t);else if("object"==typeof e)for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(e[n]=o(e[n],t));return e}t.deconstructPacket=function(e){const t=[],n=e.data,r=e;return r.data=i(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=o(e.data,t),delete e.attachments,e}},4627:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=n(4454),i=n(4926),o=n(9133),s=(0,n(852).default)("socket.io-parser"),a=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"];var c;function u(e){return"[object Object]"===Object.prototype.toString.call(e)}t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(c=t.PacketType||(t.PacketType={})),t.Encoder=class{constructor(e){this.replacer=e}encode(e){return s("encoding packet %j",e),e.type!==c.EVENT&&e.type!==c.ACK||!(0,o.hasBinary)(e)?[this.encodeAsString(e)]:this.encodeAsBinary({type:e.type===c.EVENT?c.BINARY_EVENT:c.BINARY_ACK,nsp:e.nsp,data:e.data,id:e.id})}encodeAsString(e){let t=""+e.type;return e.type!==c.BINARY_EVENT&&e.type!==c.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data,this.replacer)),s("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=(0,i.deconstructPacket)(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};class l extends r.Emitter{constructor(e){super(),this.reviver=e}add(e){let t;if("string"==typeof e){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");t=this.decodeString(e);const n=t.type===c.BINARY_EVENT;n||t.type===c.BINARY_ACK?(t.type=n?c.EVENT:c.ACK,this.reconstructor=new p(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t)}else{if(!(0,o.isBinary)(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===c[n.type])throw new Error("unknown packet type "+n.type);if(n.type===c.BINARY_EVENT||n.type===c.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const i=e.substring(r,t);if(i!=Number(i)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(i)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=this.tryParse(e.substr(t));if(!l.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return s("decoded %s as %j",e,n),n}tryParse(e){try{return JSON.parse(e,this.reviver)}catch(e){return!1}}static isPayloadValid(e,t){switch(e){case c.CONNECT:return u(t);case c.DISCONNECT:return void 0===t;case c.CONNECT_ERROR:return"string"==typeof t||u(t);case c.EVENT:case c.BINARY_EVENT:return Array.isArray(t)&&("number"==typeof t[0]||"string"==typeof t[0]&&-1===a.indexOf(t[0]));case c.ACK:case c.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}t.Decoder=l;class p{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=(0,i.reconstructPacket)(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},9133:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const n="function"==typeof ArrayBuffer,r=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function s(e){return n&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||i&&e instanceof Blob||o&&e instanceof File}t.isBinary=s,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(s(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}},4454:(e,t,n)=>{"use strict";function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}n.r(t),n.d(t,{Emitter:()=>r}),r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<r.length;i++)if((n=r[i])===t||n.fn===t){r.splice(i,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,t)}return this},r.prototype.emitReserved=r.prototype.emit,r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n(1859)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,